
let wasm;

let cachedTextDecoder = new TextDecoder('utf-8', { ignoreBOM: true, fatal: true });

cachedTextDecoder.decode();

let cachegetUint8Memory0 = null;
function getUint8Memory0() {
    if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {
        cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);
    }
    return cachegetUint8Memory0;
}

function getStringFromWasm0(ptr, len) {
    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));
}

const heap = new Array(32).fill(undefined);

heap.push(undefined, null, true, false);

let heap_next = heap.length;

function addHeapObject(obj) {
    if (heap_next === heap.length) heap.push(heap.length + 1);
    const idx = heap_next;
    heap_next = heap[idx];

    heap[idx] = obj;
    return idx;
}

function getObject(idx) { return heap[idx]; }

function dropObject(idx) {
    if (idx < 36) return;
    heap[idx] = heap_next;
    heap_next = idx;
}

function takeObject(idx) {
    const ret = getObject(idx);
    dropObject(idx);
    return ret;
}

let WASM_VECTOR_LEN = 0;

let cachedTextEncoder = new TextEncoder('utf-8');

const encodeString = (typeof cachedTextEncoder.encodeInto === 'function'
    ? function (arg, view) {
    return cachedTextEncoder.encodeInto(arg, view);
}
    : function (arg, view) {
    const buf = cachedTextEncoder.encode(arg);
    view.set(buf);
    return {
        read: arg.length,
        written: buf.length
    };
});

function passStringToWasm0(arg, malloc, realloc) {

    if (realloc === undefined) {
        const buf = cachedTextEncoder.encode(arg);
        const ptr = malloc(buf.length);
        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);
        WASM_VECTOR_LEN = buf.length;
        return ptr;
    }

    let len = arg.length;
    let ptr = malloc(len);

    const mem = getUint8Memory0();

    let offset = 0;

    for (; offset < len; offset++) {
        const code = arg.charCodeAt(offset);
        if (code > 0x7F) break;
        mem[ptr + offset] = code;
    }

    if (offset !== len) {
        if (offset !== 0) {
            arg = arg.slice(offset);
        }
        ptr = realloc(ptr, len, len = offset + arg.length * 3);
        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);
        const ret = encodeString(arg, view);

        offset += ret.written;
    }

    WASM_VECTOR_LEN = offset;
    return ptr;
}

let cachegetInt32Memory0 = null;
function getInt32Memory0() {
    if (cachegetInt32Memory0 === null || cachegetInt32Memory0.buffer !== wasm.memory.buffer) {
        cachegetInt32Memory0 = new Int32Array(wasm.memory.buffer);
    }
    return cachegetInt32Memory0;
}

function isLikeNone(x) {
    return x === undefined || x === null;
}

function debugString(val) {
    // primitive types
    const type = typeof val;
    if (type == 'number' || type == 'boolean' || val == null) {
        return  `${val}`;
    }
    if (type == 'string') {
        return `"${val}"`;
    }
    if (type == 'symbol') {
        const description = val.description;
        if (description == null) {
            return 'Symbol';
        } else {
            return `Symbol(${description})`;
        }
    }
    if (type == 'function') {
        const name = val.name;
        if (typeof name == 'string' && name.length > 0) {
            return `Function(${name})`;
        } else {
            return 'Function';
        }
    }
    // objects
    if (Array.isArray(val)) {
        const length = val.length;
        let debug = '[';
        if (length > 0) {
            debug += debugString(val[0]);
        }
        for(let i = 1; i < length; i++) {
            debug += ', ' + debugString(val[i]);
        }
        debug += ']';
        return debug;
    }
    // Test for built-in
    const builtInMatches = /\[object ([^\]]+)\]/.exec(toString.call(val));
    let className;
    if (builtInMatches.length > 1) {
        className = builtInMatches[1];
    } else {
        // Failed to match the standard '[object ClassName]'
        return toString.call(val);
    }
    if (className == 'Object') {
        // we're a user defined class or Object
        // JSON.stringify avoids problems with cycles, and is generally much
        // easier than looping through ownProperties of `val`.
        try {
            return 'Object(' + JSON.stringify(val) + ')';
        } catch (_) {
            return 'Object';
        }
    }
    // errors
    if (val instanceof Error) {
        return `${val.name}: ${val.message}\n${val.stack}`;
    }
    // TODO we could test for more things here, like `Set`s and `Map`s.
    return className;
}

function makeMutClosure(arg0, arg1, dtor, f) {
    const state = { a: arg0, b: arg1, cnt: 1, dtor };
    const real = (...args) => {
        // First up with a closure we increment the internal reference
        // count. This ensures that the Rust closure environment won't
        // be deallocated while we're invoking it.
        state.cnt++;
        const a = state.a;
        state.a = 0;
        try {
            return f(a, state.b, ...args);
        } finally {
            if (--state.cnt === 0) {
                wasm.__wbindgen_export_2.get(state.dtor)(a, state.b);

            } else {
                state.a = a;
            }
        }
    };
    real.original = state;

    return real;
}
function __wbg_adapter_32(arg0, arg1, arg2) {
    wasm._dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h77cc1c031d67f529(arg0, arg1, addHeapObject(arg2));
}

function __wbg_adapter_35(arg0, arg1) {
    wasm._dyn_core__ops__function__FnMut_____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__hf632f9491e3437dd(arg0, arg1);
}

function _assertClass(instance, klass) {
    if (!(instance instanceof klass)) {
        throw new Error(`expected instance of ${klass.name}`);
    }
    return instance.ptr;
}

let stack_pointer = 32;

function addBorrowedObject(obj) {
    if (stack_pointer == 1) throw new Error('out of js stack');
    heap[--stack_pointer] = obj;
    return stack_pointer;
}
/**
* Initializes the console error panic hook for better error messages
*/
export function start() {
    wasm.start();
}

function handleError(f, args) {
    try {
        return f.apply(this, args);
    } catch (e) {
        wasm.__wbindgen_exn_store(addHeapObject(e));
    }
}

function getArrayU8FromWasm0(ptr, len) {
    return getUint8Memory0().subarray(ptr / 1, ptr / 1 + len);
}
function __wbg_adapter_296(arg0, arg1, arg2, arg3) {
    wasm.wasm_bindgen__convert__closures__invoke2_mut__ha4d7a16bf3195c6a(arg0, arg1, addHeapObject(arg2), addHeapObject(arg3));
}

/**
*/
export const KeyType = Object.freeze({ Ed25519:1,"1":"Ed25519", });
/**
*/
export const DIDMessageEncoding = Object.freeze({ Json:0,"0":"Json",JsonBrotli:1,"1":"JsonBrotli", });
/**
*/
export const Digest = Object.freeze({ Sha256:1,"1":"Sha256",Blake2b256:2,"2":"Blake2b256", });
/**
*/
export class Client {

    static __wrap(ptr) {
        const obj = Object.create(Client.prototype);
        obj.ptr = ptr;

        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.ptr;
        this.ptr = 0;

        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_client_free(ptr);
    }
    /**
    * Creates a new `Client` with default settings.
    */
    constructor() {
        var ret = wasm.client_new();
        return Client.__wrap(ret);
    }
    /**
    * Creates a new `Client` with settings from the given `Config`.
    * @param {Config} config
    * @returns {Client}
    */
    static fromConfig(config) {
        _assertClass(config, Config);
        var ret = wasm.client_fromConfig(config.ptr);
        return Client.__wrap(ret);
    }
    /**
    * Creates a new `Client` with default settings for the given `Network`.
    * @param {Network} network
    * @returns {Client}
    */
    static fromNetwork(network) {
        _assertClass(network, Network);
        var ptr0 = network.ptr;
        network.ptr = 0;
        var ret = wasm.client_fromNetwork(ptr0);
        return Client.__wrap(ret);
    }
    /**
    * Returns the `Client` Tangle network.
    * @returns {Network}
    */
    network() {
        var ret = wasm.client_network(this.ptr);
        return Network.__wrap(ret);
    }
    /**
    * Publishes an `IotaDocument` to the Tangle.
    * @param {Document} document
    * @returns {Promise<Receipt>}
    */
    publishDocument(document) {
        _assertClass(document, Document);
        var ret = wasm.client_publishDocument(this.ptr, document.ptr);
        return takeObject(ret);
    }
    /**
    * Publishes a `DiffMessage` to the Tangle.
    * @param {string} message_id
    * @param {DiffMessage} diff
    * @returns {Promise<Receipt>}
    */
    publishDiff(message_id, diff) {
        var ptr0 = passStringToWasm0(message_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        _assertClass(diff, DiffMessage);
        var ptr1 = diff.ptr;
        diff.ptr = 0;
        var ret = wasm.client_publishDiff(this.ptr, ptr0, len0, ptr1);
        return takeObject(ret);
    }
    /**
    * Publishes arbitrary JSON data to the specified index on the Tangle.
    * @param {string} index
    * @param {any} data
    * @returns {Promise<Receipt>}
    */
    publishJSON(index, data) {
        try {
            var ptr0 = passStringToWasm0(index, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
            var len0 = WASM_VECTOR_LEN;
            var ret = wasm.client_publishJSON(this.ptr, ptr0, len0, addBorrowedObject(data));
            return takeObject(ret);
        } finally {
            heap[stack_pointer++] = undefined;
        }
    }
    /**
    * Publishes arbitrary JSON data to the specified index on the Tangle.
    * Retries (promotes or reattaches) the message until itâ€™s included (referenced by a milestone).
    * Default interval is 5 seconds and max attempts is 40.
    * @param {string} index
    * @param {any} data
    * @param {number | undefined} interval
    * @param {number | undefined} max_attempts
    * @returns {Promise<any>}
    */
    publishJsonWithRetry(index, data, interval, max_attempts) {
        try {
            var ptr0 = passStringToWasm0(index, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
            var len0 = WASM_VECTOR_LEN;
            var ret = wasm.client_publishJsonWithRetry(this.ptr, ptr0, len0, addBorrowedObject(data), !isLikeNone(interval), isLikeNone(interval) ? 0 : interval, !isLikeNone(max_attempts), isLikeNone(max_attempts) ? 0 : max_attempts);
            return takeObject(ret);
        } finally {
            heap[stack_pointer++] = undefined;
        }
    }
    /**
    * Fetch the DID document specified by the given `DID`.
    * @param {string} did
    * @returns {Promise<ResolvedDocument>}
    */
    resolve(did) {
        var ptr0 = passStringToWasm0(did, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        var ret = wasm.client_resolve(this.ptr, ptr0, len0);
        return takeObject(ret);
    }
    /**
    * Returns the message history of the given DID.
    * @param {string} did
    * @returns {Promise<DocumentHistory>}
    */
    resolveHistory(did) {
        var ptr0 = passStringToWasm0(did, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        var ret = wasm.client_resolveHistory(this.ptr, ptr0, len0);
        return takeObject(ret);
    }
    /**
    * Returns the `DiffChainHistory` of a diff chain starting from a document on the
    * integration chain.
    *
    * NOTE: the document must have been published to the tangle and have a valid message id and
    * capability invocation method.
    * @param {ResolvedDocument} document
    * @returns {Promise<DiffChainHistory>}
    */
    resolveDiffHistory(document) {
        _assertClass(document, ResolvedDocument);
        var ret = wasm.client_resolveDiffHistory(this.ptr, document.ptr);
        return takeObject(ret);
    }
    /**
    * Validates a credential with the DID Document from the Tangle.
    * @param {string} data
    * @returns {Promise<any>}
    */
    checkCredential(data) {
        var ptr0 = passStringToWasm0(data, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        var ret = wasm.client_checkCredential(this.ptr, ptr0, len0);
        return takeObject(ret);
    }
    /**
    * Validates a presentation with the DID Document from the Tangle.
    * @param {string} data
    * @returns {Promise<any>}
    */
    checkPresentation(data) {
        var ptr0 = passStringToWasm0(data, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        var ret = wasm.client_checkPresentation(this.ptr, ptr0, len0);
        return takeObject(ret);
    }
}
/**
*/
export class Config {

    static __wrap(ptr) {
        const obj = Object.create(Config.prototype);
        obj.ptr = ptr;

        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.ptr;
        this.ptr = 0;

        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_config_free(ptr);
    }
    /**
    */
    constructor() {
        var ret = wasm.config_new();
        return Config.__wrap(ret);
    }
    /**
    * @param {Network} network
    * @returns {Config}
    */
    static fromNetwork(network) {
        _assertClass(network, Network);
        var ret = wasm.config_fromNetwork(network.ptr);
        return Config.__wrap(ret);
    }
    /**
    * @param {Network} network
    */
    setNetwork(network) {
        _assertClass(network, Network);
        wasm.config_setNetwork(this.ptr, network.ptr);
    }
    /**
    * @param {string} url
    */
    setNode(url) {
        var ptr0 = passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        wasm.config_setNode(this.ptr, ptr0, len0);
    }
    /**
    * @param {number} encoding
    */
    setEncoding(encoding) {
        wasm.config_setEncoding(this.ptr, encoding);
    }
    /**
    * @param {string} url
    * @param {string | undefined} jwt
    * @param {string | undefined} username
    * @param {string | undefined} password
    */
    setPrimaryNode(url, jwt, username, password) {
        var ptr0 = passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        var ptr1 = isLikeNone(jwt) ? 0 : passStringToWasm0(jwt, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len1 = WASM_VECTOR_LEN;
        var ptr2 = isLikeNone(username) ? 0 : passStringToWasm0(username, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len2 = WASM_VECTOR_LEN;
        var ptr3 = isLikeNone(password) ? 0 : passStringToWasm0(password, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len3 = WASM_VECTOR_LEN;
        wasm.config_setPrimaryNode(this.ptr, ptr0, len0, ptr1, len1, ptr2, len2, ptr3, len3);
    }
    /**
    * @param {string} url
    * @param {string | undefined} jwt
    * @param {string | undefined} username
    * @param {string | undefined} password
    */
    setPrimaryPoWNode(url, jwt, username, password) {
        var ptr0 = passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        var ptr1 = isLikeNone(jwt) ? 0 : passStringToWasm0(jwt, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len1 = WASM_VECTOR_LEN;
        var ptr2 = isLikeNone(username) ? 0 : passStringToWasm0(username, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len2 = WASM_VECTOR_LEN;
        var ptr3 = isLikeNone(password) ? 0 : passStringToWasm0(password, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len3 = WASM_VECTOR_LEN;
        wasm.config_setPrimaryPoWNode(this.ptr, ptr0, len0, ptr1, len1, ptr2, len2, ptr3, len3);
    }
    /**
    * @param {string} url
    * @param {string | undefined} jwt
    * @param {string | undefined} username
    * @param {string | undefined} password
    */
    setPermanode(url, jwt, username, password) {
        var ptr0 = passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        var ptr1 = isLikeNone(jwt) ? 0 : passStringToWasm0(jwt, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len1 = WASM_VECTOR_LEN;
        var ptr2 = isLikeNone(username) ? 0 : passStringToWasm0(username, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len2 = WASM_VECTOR_LEN;
        var ptr3 = isLikeNone(password) ? 0 : passStringToWasm0(password, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len3 = WASM_VECTOR_LEN;
        wasm.config_setPermanode(this.ptr, ptr0, len0, ptr1, len1, ptr2, len2, ptr3, len3);
    }
    /**
    * @param {string} url
    * @param {string | undefined} jwt
    * @param {string | undefined} username
    * @param {string | undefined} password
    */
    setNodeAuth(url, jwt, username, password) {
        var ptr0 = passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        var ptr1 = isLikeNone(jwt) ? 0 : passStringToWasm0(jwt, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len1 = WASM_VECTOR_LEN;
        var ptr2 = isLikeNone(username) ? 0 : passStringToWasm0(username, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len2 = WASM_VECTOR_LEN;
        var ptr3 = isLikeNone(password) ? 0 : passStringToWasm0(password, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len3 = WASM_VECTOR_LEN;
        wasm.config_setNodeAuth(this.ptr, ptr0, len0, ptr1, len1, ptr2, len2, ptr3, len3);
    }
    /**
    * @param {number} value
    */
    setNodeSyncInterval(value) {
        wasm.config_setNodeSyncInterval(this.ptr, value);
    }
    /**
    */
    setNodeSyncDisabled() {
        wasm.config_setNodeSyncDisabled(this.ptr);
    }
    /**
    * @param {boolean} value
    */
    setQuorum(value) {
        wasm.config_setQuorum(this.ptr, value);
    }
    /**
    * @param {number} value
    */
    setQuorumSize(value) {
        wasm.config_setQuorumSize(this.ptr, value);
    }
    /**
    * @param {number} value
    */
    setQuorumThreshold(value) {
        wasm.config_setQuorumThreshold(this.ptr, value);
    }
    /**
    * @param {boolean} value
    */
    setLocalPoW(value) {
        wasm.config_setLocalPoW(this.ptr, value);
    }
    /**
    * @param {number} value
    */
    setTipsInterval(value) {
        wasm.config_setTipsInterval(this.ptr, value);
    }
    /**
    * @param {number} value
    */
    setRequestTimeout(value) {
        wasm.config_setRequestTimeout(this.ptr, value);
    }
}
/**
* @typicalname did
*/
export class DID {

    static __wrap(ptr) {
        const obj = Object.create(DID.prototype);
        obj.ptr = ptr;

        return obj;
    }

    toJSON() {
        return {
            network: this.network,
            networkName: this.networkName,
            tag: this.tag,
        };
    }

    toString() {
        return JSON.stringify(this);
    }

    __destroy_into_raw() {
        const ptr = this.ptr;
        this.ptr = 0;

        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_did_free(ptr);
    }
    /**
    * Creates a new `DID` from a `KeyPair` object.
    * @param {KeyPair} key
    * @param {string | undefined} network
    */
    constructor(key, network) {
        _assertClass(key, KeyPair);
        var ptr0 = isLikeNone(network) ? 0 : passStringToWasm0(network, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        var ret = wasm.did_new(key.ptr, ptr0, len0);
        return DID.__wrap(ret);
    }
    /**
    * Creates a new `DID` from a base58-encoded public key.
    * @param {string} key
    * @param {string | undefined} network
    * @returns {DID}
    */
    static fromBase58(key, network) {
        var ptr0 = passStringToWasm0(key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        var ptr1 = isLikeNone(network) ? 0 : passStringToWasm0(network, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len1 = WASM_VECTOR_LEN;
        var ret = wasm.did_fromBase58(ptr0, len0, ptr1, len1);
        return DID.__wrap(ret);
    }
    /**
    * Parses a `DID` from the input string.
    * @param {string} input
    * @returns {DID}
    */
    static parse(input) {
        var ptr0 = passStringToWasm0(input, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        var ret = wasm.did_parse(ptr0, len0);
        return DID.__wrap(ret);
    }
    /**
    * Returns the IOTA tangle network of the `DID`.
    * @returns {Network}
    */
    get network() {
        var ret = wasm.did_network(this.ptr);
        return Network.__wrap(ret);
    }
    /**
    * Returns the IOTA tangle network of the `DID`.
    * @returns {string}
    */
    get networkName() {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.did_network_name(retptr, this.ptr);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            return getStringFromWasm0(r0, r1);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
            wasm.__wbindgen_free(r0, r1);
        }
    }
    /**
    * Returns the unique tag of the `DID`.
    * @returns {string}
    */
    get tag() {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.did_tag(retptr, this.ptr);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            return getStringFromWasm0(r0, r1);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
            wasm.__wbindgen_free(r0, r1);
        }
    }
    /**
    * Construct a new `DIDUrl` by joining with a relative DID Url string.
    * @param {string} segment
    * @returns {DIDUrl}
    */
    join(segment) {
        const ptr = this.__destroy_into_raw();
        var ptr0 = passStringToWasm0(segment, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        var ret = wasm.did_join(ptr, ptr0, len0);
        return DIDUrl.__wrap(ret);
    }
    /**
    * Clones the `DID` into a `DIDUrl`.
    * @returns {DIDUrl}
    */
    toUrl() {
        var ret = wasm.did_toUrl(this.ptr);
        return DIDUrl.__wrap(ret);
    }
    /**
    * Converts the `DID` into a `DIDUrl`.
    * @returns {DIDUrl}
    */
    intoUrl() {
        const ptr = this.__destroy_into_raw();
        var ret = wasm.did_intoUrl(ptr);
        return DIDUrl.__wrap(ret);
    }
    /**
    * Returns the `DID` as a string.
    * @returns {string}
    */
    toString() {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.did_toString(retptr, this.ptr);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            return getStringFromWasm0(r0, r1);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
            wasm.__wbindgen_free(r0, r1);
        }
    }
}
/**
* @typicalname didUrl
*/
export class DIDUrl {

    static __wrap(ptr) {
        const obj = Object.create(DIDUrl.prototype);
        obj.ptr = ptr;

        return obj;
    }

    toJSON() {
        return {
            did: this.did,
            url_str: this.url_str,
            fragment: this.fragment,
            path: this.path,
            query: this.query,
        };
    }

    toString() {
        return JSON.stringify(this);
    }

    __destroy_into_raw() {
        const ptr = this.ptr;
        this.ptr = 0;

        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_didurl_free(ptr);
    }
    /**
    * Parses a `DIDUrl` from the input string.
    * @param {string} input
    * @returns {DIDUrl}
    */
    static parse(input) {
        var ptr0 = passStringToWasm0(input, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        var ret = wasm.didurl_parse(ptr0, len0);
        return DIDUrl.__wrap(ret);
    }
    /**
    * Return the `DID` section of the `DIDUrl`.
    *
    * Note: clones the data
    * @returns {DID}
    */
    get did() {
        var ret = wasm.didurl_did(this.ptr);
        return DID.__wrap(ret);
    }
    /**
    * Return the relative DID Url as a string, including only the path, query, and fragment.
    * @returns {string}
    */
    get url_str() {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.didurl_url_str(retptr, this.ptr);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            return getStringFromWasm0(r0, r1);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
            wasm.__wbindgen_free(r0, r1);
        }
    }
    /**
    * Returns the `DIDUrl` method fragment, if any. Excludes the leading '#'.
    * @returns {string | undefined}
    */
    get fragment() {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.didurl_fragment(retptr, this.ptr);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            let v0;
            if (r0 !== 0) {
                v0 = getStringFromWasm0(r0, r1).slice();
                wasm.__wbindgen_free(r0, r1 * 1);
            }
            return v0;
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
    /**
    * Sets the `fragment` component of the `DIDUrl`.
    * @param {string | undefined} value
    */
    set fragment(value) {
        var ptr0 = isLikeNone(value) ? 0 : passStringToWasm0(value, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        wasm.didurl_set_fragment(this.ptr, ptr0, len0);
    }
    /**
    * Returns the `DIDUrl` path.
    * @returns {string | undefined}
    */
    get path() {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.didurl_path(retptr, this.ptr);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            let v0;
            if (r0 !== 0) {
                v0 = getStringFromWasm0(r0, r1).slice();
                wasm.__wbindgen_free(r0, r1 * 1);
            }
            return v0;
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
    /**
    * Sets the `path` component of the `DIDUrl`.
    * @param {string | undefined} value
    */
    set path(value) {
        var ptr0 = isLikeNone(value) ? 0 : passStringToWasm0(value, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        wasm.didurl_set_path(this.ptr, ptr0, len0);
    }
    /**
    * Returns the `DIDUrl` method query, if any. Excludes the leading '?'.
    * @returns {string | undefined}
    */
    get query() {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.didurl_query(retptr, this.ptr);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            let v0;
            if (r0 !== 0) {
                v0 = getStringFromWasm0(r0, r1).slice();
                wasm.__wbindgen_free(r0, r1 * 1);
            }
            return v0;
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
    /**
    * Sets the `query` component of the `DIDUrl`.
    * @param {string | undefined} value
    */
    set query(value) {
        var ptr0 = isLikeNone(value) ? 0 : passStringToWasm0(value, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        wasm.didurl_set_query(this.ptr, ptr0, len0);
    }
    /**
    * Append a string representing a path, query, and/or fragment to this `DIDUrl`.
    *
    * Must begin with a valid delimiter character: '/', '?', '#'. Overwrites the existing URL
    * segment and any following segments in order of path, query, then fragment.
    *
    * I.e.
    * - joining a path will clear the query and fragment.
    * - joining a query will clear the fragment.
    * - joining a fragment will only overwrite the fragment.
    * @param {string} segment
    * @returns {DIDUrl}
    */
    join(segment) {
        const ptr = this.__destroy_into_raw();
        var ptr0 = passStringToWasm0(segment, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        var ret = wasm.didurl_join(ptr, ptr0, len0);
        return DIDUrl.__wrap(ret);
    }
    /**
    * Returns the `DIDUrl` as a string.
    * @returns {string}
    */
    toString() {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.didurl_toString(retptr, this.ptr);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            return getStringFromWasm0(r0, r1);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
            wasm.__wbindgen_free(r0, r1);
        }
    }
}
/**
*/
export class DiffChainHistory {

    static __wrap(ptr) {
        const obj = Object.create(DiffChainHistory.prototype);
        obj.ptr = ptr;

        return obj;
    }

    toJSON() {
        return {
        };
    }

    toString() {
        return JSON.stringify(this);
    }

    __destroy_into_raw() {
        const ptr = this.ptr;
        this.ptr = 0;

        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_diffchainhistory_free(ptr);
    }
    /**
    * Returns an `Array` of the diff chain `DiffMessages`.
    *
    * NOTE: this clones the field.
    * @returns {Array<DiffMessage>}
    */
    chainData() {
        var ret = wasm.diffchainhistory_chainData(this.ptr);
        return takeObject(ret);
    }
    /**
    * Returns an `Array` of `MessageIds` as strings.
    *
    * NOTE: this clones the field.
    * @returns {Array<string>}
    */
    spam() {
        var ret = wasm.diffchainhistory_spam(this.ptr);
        return takeObject(ret);
    }
    /**
    * Serializes as a JSON object.
    * @returns {any}
    */
    toJSON() {
        var ret = wasm.diffchainhistory_toJSON(this.ptr);
        return takeObject(ret);
    }
    /**
    * Deserializes from a JSON object.
    * @param {any} json
    * @returns {DiffChainHistory}
    */
    static fromJSON(json) {
        try {
            var ret = wasm.diffchainhistory_fromJSON(addBorrowedObject(json));
            return DiffChainHistory.__wrap(ret);
        } finally {
            heap[stack_pointer++] = undefined;
        }
    }
}
/**
* Defines the difference between two DID `Document`s' JSON representations.
*/
export class DiffMessage {

    static __wrap(ptr) {
        const obj = Object.create(DiffMessage.prototype);
        obj.ptr = ptr;

        return obj;
    }

    toJSON() {
        return {
            did: this.did,
            diff: this.diff,
            messageId: this.messageId,
            previousMessageId: this.previousMessageId,
            proof: this.proof,
        };
    }

    toString() {
        return JSON.stringify(this);
    }

    __destroy_into_raw() {
        const ptr = this.ptr;
        this.ptr = 0;

        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_diffmessage_free(ptr);
    }
    /**
    * Returns the DID of the associated DID Document.
    *
    * NOTE: clones the data.
    * @returns {DID}
    */
    id() {
        var ret = wasm.diffmessage_id(this.ptr);
        return DID.__wrap(ret);
    }
    /**
    * Returns the DID of the associated DID Document.
    * @returns {DID}
    */
    get did() {
        var ret = wasm.diffmessage_did(this.ptr);
        return DID.__wrap(ret);
    }
    /**
    * Returns the raw contents of the DID Document diff.
    *
    * NOTE: clones the data.
    * @returns {string}
    */
    get diff() {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.diffmessage_diff(retptr, this.ptr);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            return getStringFromWasm0(r0, r1);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
            wasm.__wbindgen_free(r0, r1);
        }
    }
    /**
    * Returns the message_id of the DID Document diff.
    * @returns {string}
    */
    get messageId() {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.diffmessage_message_id(retptr, this.ptr);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            return getStringFromWasm0(r0, r1);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
            wasm.__wbindgen_free(r0, r1);
        }
    }
    /**
    * Sets the message_id of the DID Document diff.
    * @param {string} message_id
    */
    set messageId(message_id) {
        var ptr0 = passStringToWasm0(message_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        wasm.diffmessage_set_message_id(this.ptr, ptr0, len0);
    }
    /**
    * Returns the Tangle message id of the previous DID Document diff.
    * @returns {string}
    */
    get previousMessageId() {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.diffmessage_previous_message_id(retptr, this.ptr);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            return getStringFromWasm0(r0, r1);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
            wasm.__wbindgen_free(r0, r1);
        }
    }
    /**
    * Sets the Tangle message id of the previous DID Document diff.
    * @param {string} message_id
    */
    set previousMessageId(message_id) {
        var ptr0 = passStringToWasm0(message_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        wasm.diffmessage_set_previous_message_id(this.ptr, ptr0, len0);
    }
    /**
    * Returns the `proof` object.
    * @returns {any}
    */
    get proof() {
        var ret = wasm.diffmessage_proof(this.ptr);
        return takeObject(ret);
    }
    /**
    * Returns a new DID Document which is the result of merging `self`
    * with the given Document.
    * @param {Document} document
    * @returns {Document}
    */
    merge(document) {
        _assertClass(document, Document);
        var ret = wasm.diffmessage_merge(this.ptr, document.ptr);
        return Document.__wrap(ret);
    }
}
/**
*/
export class Document {

    static __wrap(ptr) {
        const obj = Object.create(Document.prototype);
        obj.ptr = ptr;

        return obj;
    }

    toJSON() {
        return {
            id: this.id,
            metadata: this.metadata,
            metadataCreated: this.metadataCreated,
            metadataUpdated: this.metadataUpdated,
            metadataPreviousMessageId: this.metadataPreviousMessageId,
            metadataProof: this.metadataProof,
        };
    }

    toString() {
        return JSON.stringify(this);
    }

    __destroy_into_raw() {
        const ptr = this.ptr;
        this.ptr = 0;

        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_document_free(ptr);
    }
    /**
    * Creates a new DID Document from the given `KeyPair`, network, and verification method
    * fragment name.
    *
    * The DID Document will be pre-populated with a single verification method
    * derived from the provided `KeyPair` embedded as a capability invocation
    * verification relationship. This method will have the DID URL fragment
    * `#sign-0` by default and can be easily retrieved with `Document::defaultSigningMethod`.
    *
    * NOTE: the generated document is unsigned, see `Document::signSelf`.
    *
    * Arguments:
    *
    * * keypair: the initial verification method is derived from the public key with this keypair.
    * * network: Tangle network to use for the DID, default `Network::mainnet`.
    * * fragment: name of the initial verification method, default "sign-0".
    * @param {KeyPair} keypair
    * @param {string | undefined} network
    * @param {string | undefined} fragment
    */
    constructor(keypair, network, fragment) {
        _assertClass(keypair, KeyPair);
        var ptr0 = isLikeNone(network) ? 0 : passStringToWasm0(network, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        var ptr1 = isLikeNone(fragment) ? 0 : passStringToWasm0(fragment, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len1 = WASM_VECTOR_LEN;
        var ret = wasm.document_new(keypair.ptr, ptr0, len0, ptr1, len1);
        return Document.__wrap(ret);
    }
    /**
    * Creates a new DID Document from the given `VerificationMethod`.
    *
    * NOTE: the generated document is unsigned, see `Document::signSelf`.
    * @param {VerificationMethod} method
    * @returns {Document}
    */
    static fromVerificationMethod(method) {
        _assertClass(method, VerificationMethod);
        var ret = wasm.document_fromVerificationMethod(method.ptr);
        return Document.__wrap(ret);
    }
    /**
    * Returns the DID Document `id`.
    * @returns {DID}
    */
    get id() {
        var ret = wasm.document_id(this.ptr);
        return DID.__wrap(ret);
    }
    /**
    * Add a new `Service` to the document.
    * @param {Service} service
    * @returns {boolean}
    */
    insertService(service) {
        _assertClass(service, Service);
        var ret = wasm.document_insertService(this.ptr, service.ptr);
        return ret !== 0;
    }
    /**
    * Remove a `Service` identified by the given `DIDUrl` from the document.
    * @param {DIDUrl} did
    */
    removeService(did) {
        _assertClass(did, DIDUrl);
        var ptr0 = did.ptr;
        did.ptr = 0;
        wasm.document_removeService(this.ptr, ptr0);
    }
    /**
    * Adds a new Verification Method to the DID Document.
    * @param {VerificationMethod} method
    * @param {string | undefined} scope
    */
    insertMethod(method, scope) {
        _assertClass(method, VerificationMethod);
        var ptr0 = isLikeNone(scope) ? 0 : passStringToWasm0(scope, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        wasm.document_insertMethod(this.ptr, method.ptr, ptr0, len0);
    }
    /**
    * Removes all references to the specified Verification Method.
    * @param {DIDUrl} did
    */
    removeMethod(did) {
        _assertClass(did, DIDUrl);
        var ptr0 = did.ptr;
        did.ptr = 0;
        wasm.document_removeMethod(this.ptr, ptr0);
    }
    /**
    * Returns the first `VerificationMethod` with a capability invocation relationship
    * capable of signing this DID document.
    *
    * Throws an error if no signing method is present.
    * @returns {VerificationMethod}
    */
    defaultSigningMethod() {
        var ret = wasm.document_defaultSigningMethod(this.ptr);
        return VerificationMethod.__wrap(ret);
    }
    /**
    * Returns the first `VerificationMethod` with an `id` property
    * matching the provided `query`.
    *
    * Throws an error if the method is not found.
    * @param {string} query
    * @returns {VerificationMethod}
    */
    resolveMethod(query) {
        var ptr0 = passStringToWasm0(query, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        var ret = wasm.document_resolveMethod(this.ptr, ptr0, len0);
        return VerificationMethod.__wrap(ret);
    }
    /**
    * @param {string} query
    * @param {number} index
    * @returns {boolean}
    */
    revokeMerkleKey(query, index) {
        var ptr0 = passStringToWasm0(query, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        var ret = wasm.document_revokeMerkleKey(this.ptr, ptr0, len0, index);
        return ret !== 0;
    }
    /**
    * Signs the DID document with the verification method specified by `method_query`.
    * The `method_query` may be the full `DIDUrl` of the method or just its fragment,
    * e.g. "#sign-0".
    *
    * NOTE: does not validate whether the private key of the given `key_pair` corresponds to the
    * verification method. See `Document::verifySelfSigned`.
    * @param {KeyPair} key_pair
    * @param {string} method_query
    */
    signSelf(key_pair, method_query) {
        _assertClass(key_pair, KeyPair);
        var ptr0 = passStringToWasm0(method_query, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        wasm.document_signSelf(this.ptr, key_pair.ptr, ptr0, len0);
    }
    /**
    * Verifies a self-signed signature on this DID document.
    * @returns {boolean}
    */
    verifySelfSigned() {
        var ret = wasm.document_verifySelfSigned(this.ptr);
        return ret !== 0;
    }
    /**
    * Verifies whether `document` is a valid root DID document according to the IOTA DID method
    * specification.
    *
    * It must be signed using a verification method with a public key whose BLAKE2b-256 hash matches
    * the DID tag.
    * @param {Document} document
    */
    static verifyRootDocument(document) {
        _assertClass(document, Document);
        wasm.document_verifyRootDocument(document.ptr);
    }
    /**
    * @param {any} data
    * @param {any} args
    * @returns {VerifiableCredential}
    */
    signCredential(data, args) {
        try {
            var ret = wasm.document_signCredential(this.ptr, addBorrowedObject(data), addBorrowedObject(args));
            return VerifiableCredential.__wrap(ret);
        } finally {
            heap[stack_pointer++] = undefined;
            heap[stack_pointer++] = undefined;
        }
    }
    /**
    * @param {any} data
    * @param {any} args
    * @returns {VerifiablePresentation}
    */
    signPresentation(data, args) {
        try {
            var ret = wasm.document_signPresentation(this.ptr, addBorrowedObject(data), addBorrowedObject(args));
            return VerifiablePresentation.__wrap(ret);
        } finally {
            heap[stack_pointer++] = undefined;
            heap[stack_pointer++] = undefined;
        }
    }
    /**
    * Creates a signature for the given `data` with the specified DID Document
    * Verification Method.
    *
    * An additional `proof` property is required if using a Merkle Key
    * Collection verification Method.
    * @param {any} data
    * @param {any} args
    * @returns {any}
    */
    signData(data, args) {
        try {
            var ret = wasm.document_signData(this.ptr, addBorrowedObject(data), addBorrowedObject(args));
            return takeObject(ret);
        } finally {
            heap[stack_pointer++] = undefined;
            heap[stack_pointer++] = undefined;
        }
    }
    /**
    * Verifies the authenticity of `data` using the target verification method.
    * @param {any} data
    * @returns {boolean}
    */
    verifyData(data) {
        try {
            var ret = wasm.document_verifyData(this.ptr, addBorrowedObject(data));
            return ret !== 0;
        } finally {
            heap[stack_pointer++] = undefined;
        }
    }
    /**
    * Verifies the signature of the provided `data` was created using a verification method
    * in this DID Document with the verification relationship specified by `scope`.
    * @param {any} data
    * @param {string} scope
    * @returns {boolean}
    */
    verifyDataWithScope(data, scope) {
        try {
            var ptr0 = passStringToWasm0(scope, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
            var len0 = WASM_VECTOR_LEN;
            var ret = wasm.document_verifyDataWithScope(this.ptr, addBorrowedObject(data), ptr0, len0);
            return ret !== 0;
        } finally {
            heap[stack_pointer++] = undefined;
        }
    }
    /**
    * Generate a `DiffMessage` between two DID Documents and sign it using the specified
    * `key` and `method`.
    * @param {Document} other
    * @param {string} message
    * @param {KeyPair} key
    * @param {string} method
    * @returns {DiffMessage}
    */
    diff(other, message, key, method) {
        _assertClass(other, Document);
        var ptr0 = passStringToWasm0(message, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        _assertClass(key, KeyPair);
        var ptr1 = passStringToWasm0(method, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len1 = WASM_VECTOR_LEN;
        var ret = wasm.document_diff(this.ptr, other.ptr, ptr0, len0, key.ptr, ptr1, len1);
        return DiffMessage.__wrap(ret);
    }
    /**
    * Verifies the signature of the `diff` was created using a capability invocation method
    * in this DID Document.
    *
    * # Errors
    *
    * Fails if an unsupported verification method is used or the verification operation fails.
    * @param {DiffMessage} diff
    */
    verifyDiff(diff) {
        _assertClass(diff, DiffMessage);
        wasm.document_verifyDiff(this.ptr, diff.ptr);
    }
    /**
    * Verifies a `DiffMessage` signature and attempts to merge the changes into `self`.
    * @param {DiffMessage} diff
    */
    merge_diff(diff) {
        _assertClass(diff, DiffMessage);
        wasm.document_merge_diff(this.ptr, diff.ptr);
    }
    /**
    * Returns the Tangle index of the integration chain for this DID.
    *
    * This is simply the tag segment of the `DID`.
    * E.g.
    * For a document with DID: did:iota:1234567890abcdefghijklmnopqrstuvxyzABCDEFGHI,
    * `doc.integration_index()` == "1234567890abcdefghijklmnopqrstuvxyzABCDEFGHI"
    * @returns {string}
    */
    integrationIndex() {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.document_integrationIndex(retptr, this.ptr);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            return getStringFromWasm0(r0, r1);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
            wasm.__wbindgen_free(r0, r1);
        }
    }
    /**
    * Returns the Tangle index of the DID diff chain. This should only be called on documents
    * published on the integration chain.
    *
    * This is the Base58-btc encoded SHA-256 digest of the hex-encoded message id.
    * @param {string} message_id
    * @returns {string}
    */
    static diffIndex(message_id) {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            var ptr0 = passStringToWasm0(message_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
            var len0 = WASM_VECTOR_LEN;
            wasm.document_diffIndex(retptr, ptr0, len0);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            return getStringFromWasm0(r0, r1);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
            wasm.__wbindgen_free(r0, r1);
        }
    }
    /**
    * Returns the metadata associated with this document.
    *
    * NOTE: clones the data. Use the `metadataCreated`, `metadataUpdated`,
    * `metadataPreviousMessageId`, `metadataProof` properties instead.
    * @returns {DocumentMetadata}
    */
    get metadata() {
        var ret = wasm.document_metadata(this.ptr);
        return DocumentMetadata.__wrap(ret);
    }
    /**
    * Returns the timestamp of when the DID document was created.
    * @returns {Timestamp}
    */
    get metadataCreated() {
        var ret = wasm.document_metadata_created(this.ptr);
        return Timestamp.__wrap(ret);
    }
    /**
    * Sets the timestamp of when the DID document was created.
    * @param {Timestamp} timestamp
    */
    set metadataCreated(timestamp) {
        _assertClass(timestamp, Timestamp);
        var ptr0 = timestamp.ptr;
        timestamp.ptr = 0;
        wasm.document_set_metadata_created(this.ptr, ptr0);
    }
    /**
    * Returns the timestamp of the last DID document update.
    * @returns {Timestamp}
    */
    get metadataUpdated() {
        var ret = wasm.document_metadata_updated(this.ptr);
        return Timestamp.__wrap(ret);
    }
    /**
    * Sets the timestamp of the last DID document update.
    * @param {Timestamp} timestamp
    */
    set metadataUpdated(timestamp) {
        _assertClass(timestamp, Timestamp);
        var ptr0 = timestamp.ptr;
        timestamp.ptr = 0;
        wasm.document_set_metadata_updated(this.ptr, ptr0);
    }
    /**
    * Returns the previous integration chain message id.
    * @returns {string}
    */
    get metadataPreviousMessageId() {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.document_metadata_previous_message_id(retptr, this.ptr);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            return getStringFromWasm0(r0, r1);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
            wasm.__wbindgen_free(r0, r1);
        }
    }
    /**
    * Sets the previous integration chain message id.
    * @param {string} value
    */
    set metadataPreviousMessageId(value) {
        var ptr0 = passStringToWasm0(value, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        wasm.document_set_metadata_previous_message_id(this.ptr, ptr0, len0);
    }
    /**
    * Returns the `proof` object.
    * @returns {any}
    */
    get metadataProof() {
        var ret = wasm.document_metadata_proof(this.ptr);
        return takeObject(ret);
    }
    /**
    * Serializes a `Document` object as a JSON object.
    * @returns {any}
    */
    toJSON() {
        var ret = wasm.document_toJSON(this.ptr);
        return takeObject(ret);
    }
    /**
    * Deserializes a `Document` object from a JSON object.
    * @param {any} json
    * @returns {Document}
    */
    static fromJSON(json) {
        try {
            var ret = wasm.document_fromJSON(addBorrowedObject(json));
            return Document.__wrap(ret);
        } finally {
            heap[stack_pointer++] = undefined;
        }
    }
}
/**
* A DID Document's history and current state.
*/
export class DocumentHistory {

    static __wrap(ptr) {
        const obj = Object.create(DocumentHistory.prototype);
        obj.ptr = ptr;

        return obj;
    }

    toJSON() {
        return {
        };
    }

    toString() {
        return JSON.stringify(this);
    }

    __destroy_into_raw() {
        const ptr = this.ptr;
        this.ptr = 0;

        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_documenthistory_free(ptr);
    }
    /**
    * Returns an `Array` of integration chain `Documents`.
    *
    * NOTE: clones the data.
    * @returns {Array<ResolvedDocument>}
    */
    integrationChainData() {
        var ret = wasm.documenthistory_integrationChainData(this.ptr);
        return takeObject(ret);
    }
    /**
    * Returns an `Array` of message id strings for "spam" messages on the same index
    * as the integration chain.
    *
    * NOTE: clones the data.
    * @returns {Array<string>}
    */
    integrationChainSpam() {
        var ret = wasm.documenthistory_integrationChainSpam(this.ptr);
        return takeObject(ret);
    }
    /**
    * Returns an `Array` of diff chain `DiffMessages`.
    *
    * NOTE: clones the data.
    * @returns {Array<DiffMessage>}
    */
    diffChainData() {
        var ret = wasm.documenthistory_diffChainData(this.ptr);
        return takeObject(ret);
    }
    /**
    * Returns an `Array` of message id strings for "spam" messages on the same index
    * as the diff chain.
    *
    * NOTE: clones the data.
    * @returns {Array<string>}
    */
    diffChainSpam() {
        var ret = wasm.documenthistory_diffChainSpam(this.ptr);
        return takeObject(ret);
    }
    /**
    * Serializes `DocumentHistory` as a JSON object.
    * @returns {any}
    */
    toJSON() {
        var ret = wasm.documenthistory_toJSON(this.ptr);
        return takeObject(ret);
    }
    /**
    * Deserializes `DocumentHistory` from a JSON object.
    * @param {any} json
    * @returns {DocumentHistory}
    */
    static fromJSON(json) {
        try {
            var ret = wasm.documenthistory_fromJSON(addBorrowedObject(json));
            return DocumentHistory.__wrap(ret);
        } finally {
            heap[stack_pointer++] = undefined;
        }
    }
}
/**
* Additional attributes related to an IOTA DID Document.
*/
export class DocumentMetadata {

    static __wrap(ptr) {
        const obj = Object.create(DocumentMetadata.prototype);
        obj.ptr = ptr;

        return obj;
    }

    toJSON() {
        return {
            created: this.created,
            updated: this.updated,
            previousMessageId: this.previousMessageId,
            proof: this.proof,
        };
    }

    toString() {
        return JSON.stringify(this);
    }

    __destroy_into_raw() {
        const ptr = this.ptr;
        this.ptr = 0;

        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_documentmetadata_free(ptr);
    }
    /**
    * Returns the timestamp of when the DID document was created.
    * @returns {Timestamp}
    */
    get created() {
        var ret = wasm.documentmetadata_created(this.ptr);
        return Timestamp.__wrap(ret);
    }
    /**
    * Returns the timestamp of the last DID document update.
    * @returns {Timestamp}
    */
    get updated() {
        var ret = wasm.documentmetadata_updated(this.ptr);
        return Timestamp.__wrap(ret);
    }
    /**
    * @returns {string}
    */
    get previousMessageId() {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.documentmetadata_previous_message_id(retptr, this.ptr);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            return getStringFromWasm0(r0, r1);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
            wasm.__wbindgen_free(r0, r1);
        }
    }
    /**
    * Returns a reference to the `proof`.
    * @returns {any}
    */
    get proof() {
        var ret = wasm.documentmetadata_proof(this.ptr);
        return takeObject(ret);
    }
}
/**
*/
export class ExplorerUrl {

    static __wrap(ptr) {
        const obj = Object.create(ExplorerUrl.prototype);
        obj.ptr = ptr;

        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.ptr;
        this.ptr = 0;

        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_explorerurl_free(ptr);
    }
    /**
    * Constructs a new Tangle explorer URL from a string.
    *
    * Use `ExplorerUrl::mainnet` or `ExplorerUrl::devnet` unless using a private Tangle
    * or local explorer.
    * @param {string} url
    * @returns {ExplorerUrl}
    */
    static parse(url) {
        var ptr0 = passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        var ret = wasm.explorerurl_parse(ptr0, len0);
        return ExplorerUrl.__wrap(ret);
    }
    /**
    * Returns the Tangle explorer URL for the mainnet.
    * @returns {ExplorerUrl}
    */
    static mainnet() {
        var ret = wasm.explorerurl_mainnet();
        return ExplorerUrl.__wrap(ret);
    }
    /**
    * Returns the Tangle explorer URL for the devnet.
    * @returns {ExplorerUrl}
    */
    static devnet() {
        var ret = wasm.explorerurl_devnet();
        return ExplorerUrl.__wrap(ret);
    }
    /**
    * Returns the web explorer URL of the given `message_id`.
    *
    * E.g. https://explorer.iota.org/mainnet/message/{message_id}
    * @param {string} message_id
    * @returns {string}
    */
    messageUrl(message_id) {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            var ptr0 = passStringToWasm0(message_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
            var len0 = WASM_VECTOR_LEN;
            wasm.explorerurl_messageUrl(retptr, this.ptr, ptr0, len0);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            return getStringFromWasm0(r0, r1);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
            wasm.__wbindgen_free(r0, r1);
        }
    }
    /**
    * Returns the web identity resolver URL for the given DID.
    *
    * E.g. https://explorer.iota.org/mainnet/identity-resolver/{did}
    * @param {string} did
    * @returns {string}
    */
    resolverUrl(did) {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            var ptr0 = passStringToWasm0(did, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
            var len0 = WASM_VECTOR_LEN;
            wasm.explorerurl_resolverUrl(retptr, this.ptr, ptr0, len0);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            return getStringFromWasm0(r0, r1);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
            wasm.__wbindgen_free(r0, r1);
        }
    }
    /**
    * @returns {string}
    */
    toString() {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.explorerurl_toString(retptr, this.ptr);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            return getStringFromWasm0(r0, r1);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
            wasm.__wbindgen_free(r0, r1);
        }
    }
}
/**
*/
export class IntegrationChainHistory {

    static __wrap(ptr) {
        const obj = Object.create(IntegrationChainHistory.prototype);
        obj.ptr = ptr;

        return obj;
    }

    toJSON() {
        return {
        };
    }

    toString() {
        return JSON.stringify(this);
    }

    __destroy_into_raw() {
        const ptr = this.ptr;
        this.ptr = 0;

        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_integrationchainhistory_free(ptr);
    }
    /**
    * Returns an `Array` of the integration chain `Documents`.
    *
    * NOTE: this clones the field.
    * @returns {Array<ResolvedDocument>}
    */
    chainData() {
        var ret = wasm.integrationchainhistory_chainData(this.ptr);
        return takeObject(ret);
    }
    /**
    * Returns an `Array` of `MessageIds` as strings.
    *
    * NOTE: this clones the field.
    * @returns {Array<string>}
    */
    spam() {
        var ret = wasm.integrationchainhistory_spam(this.ptr);
        return takeObject(ret);
    }
    /**
    * Serializes as a JSON object.
    * @returns {any}
    */
    toJSON() {
        var ret = wasm.integrationchainhistory_toJSON(this.ptr);
        return takeObject(ret);
    }
    /**
    * Deserializes from a JSON object.
    * @param {any} json
    * @returns {IntegrationChainHistory}
    */
    static fromJSON(json) {
        try {
            var ret = wasm.integrationchainhistory_fromJSON(addBorrowedObject(json));
            return IntegrationChainHistory.__wrap(ret);
        } finally {
            heap[stack_pointer++] = undefined;
        }
    }
}
/**
*/
export class KeyCollection {

    static __wrap(ptr) {
        const obj = Object.create(KeyCollection.prototype);
        obj.ptr = ptr;

        return obj;
    }

    toJSON() {
        return {
            length: this.length,
        };
    }

    toString() {
        return JSON.stringify(this);
    }

    __destroy_into_raw() {
        const ptr = this.ptr;
        this.ptr = 0;

        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_keycollection_free(ptr);
    }
    /**
    * Creates a new `KeyCollection` with the specified key type.
    * @param {number} type_
    * @param {number} count
    */
    constructor(type_, count) {
        var ret = wasm.keycollection_new(type_, count);
        return KeyCollection.__wrap(ret);
    }
    /**
    * Returns the number of keys in the collection.
    * @returns {number}
    */
    get length() {
        var ret = wasm.keycollection_length(this.ptr);
        return ret >>> 0;
    }
    /**
    * Returns `true` if the collection contains no keys.
    * @returns {boolean}
    */
    isEmpty() {
        var ret = wasm.keycollection_isEmpty(this.ptr);
        return ret !== 0;
    }
    /**
    * Returns the keypair at the specified `index`.
    * @param {number} index
    * @returns {KeyPair | undefined}
    */
    keypair(index) {
        var ret = wasm.keycollection_keypair(this.ptr, index);
        return ret === 0 ? undefined : KeyPair.__wrap(ret);
    }
    /**
    * Returns the public key at the specified `index` as a base58-encoded string.
    * @param {number} index
    * @returns {string | undefined}
    */
    public(index) {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.keycollection_public(retptr, this.ptr, index);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            let v0;
            if (r0 !== 0) {
                v0 = getStringFromWasm0(r0, r1).slice();
                wasm.__wbindgen_free(r0, r1 * 1);
            }
            return v0;
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
    /**
    * Returns the private key at the specified `index` as a base58-encoded string.
    * @param {number} index
    * @returns {string | undefined}
    */
    private(index) {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.keycollection_private(retptr, this.ptr, index);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            let v0;
            if (r0 !== 0) {
                v0 = getStringFromWasm0(r0, r1).slice();
                wasm.__wbindgen_free(r0, r1 * 1);
            }
            return v0;
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
    /**
    * @param {number} digest
    * @returns {string}
    */
    merkleRoot(digest) {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.keycollection_merkleRoot(retptr, this.ptr, digest);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            return getStringFromWasm0(r0, r1);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
            wasm.__wbindgen_free(r0, r1);
        }
    }
    /**
    * @param {number} digest
    * @param {number} index
    * @returns {string | undefined}
    */
    merkleProof(digest, index) {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.keycollection_merkleProof(retptr, this.ptr, digest, index);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            let v0;
            if (r0 !== 0) {
                v0 = getStringFromWasm0(r0, r1).slice();
                wasm.__wbindgen_free(r0, r1 * 1);
            }
            return v0;
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
    /**
    * Serializes a `KeyCollection` object as a JSON object.
    * @returns {any}
    */
    toJSON() {
        var ret = wasm.keycollection_toJSON(this.ptr);
        return takeObject(ret);
    }
    /**
    * Deserializes a `KeyCollection` object from a JSON object.
    * @param {any} json
    * @returns {KeyCollection}
    */
    static fromJSON(json) {
        try {
            var ret = wasm.keycollection_fromJSON(addBorrowedObject(json));
            return KeyCollection.__wrap(ret);
        } finally {
            heap[stack_pointer++] = undefined;
        }
    }
}
/**
*/
export class KeyPair {

    static __wrap(ptr) {
        const obj = Object.create(KeyPair.prototype);
        obj.ptr = ptr;

        return obj;
    }

    toJSON() {
        return {
            public: this.public,
            private: this.private,
        };
    }

    toString() {
        return JSON.stringify(this);
    }

    __destroy_into_raw() {
        const ptr = this.ptr;
        this.ptr = 0;

        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_keypair_free(ptr);
    }
    /**
    * Generates a new `KeyPair` object.
    * @param {number} type_
    */
    constructor(type_) {
        var ret = wasm.keypair_new(type_);
        return KeyPair.__wrap(ret);
    }
    /**
    * Parses a `KeyPair` object from base58-encoded public/private keys.
    * @param {number} type_
    * @param {string} public_key
    * @param {string} private_key
    * @returns {KeyPair}
    */
    static fromBase58(type_, public_key, private_key) {
        var ptr0 = passStringToWasm0(public_key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        var ptr1 = passStringToWasm0(private_key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len1 = WASM_VECTOR_LEN;
        var ret = wasm.keypair_fromBase58(type_, ptr0, len0, ptr1, len1);
        return KeyPair.__wrap(ret);
    }
    /**
    * Returns the public key as a base58-encoded string.
    * @returns {string}
    */
    get public() {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.keypair_public(retptr, this.ptr);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            return getStringFromWasm0(r0, r1);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
            wasm.__wbindgen_free(r0, r1);
        }
    }
    /**
    * Returns the private key as a base58-encoded string.
    * @returns {string}
    */
    get private() {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.keypair_private(retptr, this.ptr);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            return getStringFromWasm0(r0, r1);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
            wasm.__wbindgen_free(r0, r1);
        }
    }
    /**
    * Serializes a `KeyPair` object as a JSON object.
    * @returns {any}
    */
    toJSON() {
        var ret = wasm.keypair_toJSON(this.ptr);
        return takeObject(ret);
    }
    /**
    * Deserializes a `KeyPair` object from a JSON object.
    * @param {any} json
    * @returns {KeyPair}
    */
    static fromJSON(json) {
        try {
            var ret = wasm.keypair_fromJSON(addBorrowedObject(json));
            return KeyPair.__wrap(ret);
        } finally {
            heap[stack_pointer++] = undefined;
        }
    }
}
/**
*/
export class Network {

    static __wrap(ptr) {
        const obj = Object.create(Network.prototype);
        obj.ptr = ptr;

        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.ptr;
        this.ptr = 0;

        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_network_free(ptr);
    }
    /**
    * Parses the provided string to a `Network`.
    * @param {string} name
    * @returns {Network}
    */
    static try_from_name(name) {
        var ptr0 = passStringToWasm0(name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        var ret = wasm.network_try_from_name(ptr0, len0);
        return Network.__wrap(ret);
    }
    /**
    * @returns {Network}
    */
    static mainnet() {
        var ret = wasm.network_mainnet();
        return Network.__wrap(ret);
    }
    /**
    * @returns {Network}
    */
    static devnet() {
        var ret = wasm.network_devnet();
        return Network.__wrap(ret);
    }
    /**
    * Returns the node URL of the Tangle network.
    * @returns {string | undefined}
    */
    get defaultNodeURL() {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.network_default_node_url(retptr, this.ptr);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            let v0;
            if (r0 !== 0) {
                v0 = getStringFromWasm0(r0, r1).slice();
                wasm.__wbindgen_free(r0, r1 * 1);
            }
            return v0;
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
    /**
    * @returns {string}
    */
    toString() {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.network_toString(retptr, this.ptr);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            return getStringFromWasm0(r0, r1);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
            wasm.__wbindgen_free(r0, r1);
        }
    }
}
/**
*/
export class Receipt {

    static __wrap(ptr) {
        const obj = Object.create(Receipt.prototype);
        obj.ptr = ptr;

        return obj;
    }

    toJSON() {
        return {
            network: this.network,
            messageId: this.messageId,
            networkId: this.networkId,
            nonce: this.nonce,
        };
    }

    toString() {
        return JSON.stringify(this);
    }

    __destroy_into_raw() {
        const ptr = this.ptr;
        this.ptr = 0;

        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_receipt_free(ptr);
    }
    /**
    * Returns the associated IOTA Tangle `Network`.
    * @returns {Network}
    */
    get network() {
        var ret = wasm.receipt_network(this.ptr);
        return Network.__wrap(ret);
    }
    /**
    * Returns the message `id`.
    * @returns {string}
    */
    get messageId() {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.receipt_message_id(retptr, this.ptr);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            return getStringFromWasm0(r0, r1);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
            wasm.__wbindgen_free(r0, r1);
        }
    }
    /**
    * Returns the message `network_id`.
    * @returns {string}
    */
    get networkId() {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.receipt_network_id(retptr, this.ptr);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            return getStringFromWasm0(r0, r1);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
            wasm.__wbindgen_free(r0, r1);
        }
    }
    /**
    * Returns the message `nonce`.
    * @returns {string}
    */
    get nonce() {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.receipt_nonce(retptr, this.ptr);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            return getStringFromWasm0(r0, r1);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
            wasm.__wbindgen_free(r0, r1);
        }
    }
    /**
    * Serializes a `Receipt` as a JSON object.
    * @returns {any}
    */
    toJSON() {
        var ret = wasm.receipt_toJSON(this.ptr);
        return takeObject(ret);
    }
    /**
    * Deserializes a `Receipt` from a JSON object.
    * @param {any} json
    * @returns {Receipt}
    */
    static fromJSON(json) {
        try {
            var ret = wasm.receipt_fromJSON(addBorrowedObject(json));
            return Receipt.__wrap(ret);
        } finally {
            heap[stack_pointer++] = undefined;
        }
    }
}
/**
* An IOTA DID document resolved from the Tangle. Represents an integration chain message possibly
* merged with one or more `DiffMessages`.
*/
export class ResolvedDocument {

    static __wrap(ptr) {
        const obj = Object.create(ResolvedDocument.prototype);
        obj.ptr = ptr;

        return obj;
    }

    toJSON() {
        return {
            document: this.document,
            diffMessageId: this.diffMessageId,
            metadataPreviousMessageId: this.metadataPreviousMessageId,
        };
    }

    toString() {
        return JSON.stringify(this);
    }

    __destroy_into_raw() {
        const ptr = this.ptr;
        this.ptr = 0;

        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_resolveddocument_free(ptr);
    }
    /**
    * Attempts to merge changes from a `DiffMessage` into this document and
    * updates the `ResolvedDocument::diffMessageId`.
    *
    * If merging fails the document remains unmodified, otherwise this represents
    * the merged document state.
    *
    * See `Document::mergeDiff`.
    *
    * # Errors
    *
    * Fails if the merge operation or signature verification on the diff fails.
    * @param {DiffMessage} diff_message
    */
    mergeDiffMessage(diff_message) {
        _assertClass(diff_message, DiffMessage);
        wasm.resolveddocument_mergeDiffMessage(this.ptr, diff_message.ptr);
    }
    /**
    * Returns the inner DID document.
    *
    * NOTE: clones the data. Use `intoDocument()` for efficiency.
    * @returns {Document}
    */
    get document() {
        var ret = wasm.resolveddocument_document(this.ptr);
        return Document.__wrap(ret);
    }
    /**
    * Consumes this object and returns the inner DID document.
    *
    * NOTE: trying to use the `ResolvedDocument` after calling this will throw an error.
    * @returns {Document}
    */
    intoDocument() {
        const ptr = this.__destroy_into_raw();
        var ret = wasm.resolveddocument_intoDocument(ptr);
        return Document.__wrap(ret);
    }
    /**
    * Returns the diff chain message id.
    * @returns {string}
    */
    get diffMessageId() {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.resolveddocument_diff_message_id(retptr, this.ptr);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            return getStringFromWasm0(r0, r1);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
            wasm.__wbindgen_free(r0, r1);
        }
    }
    /**
    * Sets the diff chain message id.
    * @param {string} value
    */
    set diffMessageId(value) {
        var ptr0 = passStringToWasm0(value, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        wasm.resolveddocument_set_diff_message_id(this.ptr, ptr0, len0);
    }
    /**
    * Returns the integration chain message id.
    * @returns {string}
    */
    get metadataPreviousMessageId() {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.resolveddocument_integration_message_id(retptr, this.ptr);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            return getStringFromWasm0(r0, r1);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
            wasm.__wbindgen_free(r0, r1);
        }
    }
    /**
    * Sets the integration chain message id.
    * @param {string} value
    */
    set integrationMessageId(value) {
        var ptr0 = passStringToWasm0(value, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        wasm.resolveddocument_set_integration_message_id(this.ptr, ptr0, len0);
    }
    /**
    * Serializes a `Document` object as a JSON object.
    * @returns {any}
    */
    toJSON() {
        var ret = wasm.resolveddocument_toJSON(this.ptr);
        return takeObject(ret);
    }
    /**
    * Deserializes a `Document` object from a JSON object.
    * @param {any} json
    * @returns {ResolvedDocument}
    */
    static fromJSON(json) {
        try {
            var ret = wasm.resolveddocument_fromJSON(addBorrowedObject(json));
            return ResolvedDocument.__wrap(ret);
        } finally {
            heap[stack_pointer++] = undefined;
        }
    }
}
/**
*/
export class Service {

    static __wrap(ptr) {
        const obj = Object.create(Service.prototype);
        obj.ptr = ptr;

        return obj;
    }

    toJSON() {
        return {
        };
    }

    toString() {
        return JSON.stringify(this);
    }

    __destroy_into_raw() {
        const ptr = this.ptr;
        this.ptr = 0;

        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_service_free(ptr);
    }
    /**
    * Serializes a `Service` object as a JSON object.
    * @returns {any}
    */
    toJSON() {
        var ret = wasm.service_toJSON(this.ptr);
        return takeObject(ret);
    }
    /**
    * Deserializes a `Service` object from a JSON object.
    * @param {any} value
    * @returns {Service}
    */
    static fromJSON(value) {
        try {
            var ret = wasm.service_fromJSON(addBorrowedObject(value));
            return Service.__wrap(ret);
        } finally {
            heap[stack_pointer++] = undefined;
        }
    }
}
/**
*/
export class Timestamp {

    static __wrap(ptr) {
        const obj = Object.create(Timestamp.prototype);
        obj.ptr = ptr;

        return obj;
    }

    toJSON() {
        return {
        };
    }

    toString() {
        return JSON.stringify(this);
    }

    __destroy_into_raw() {
        const ptr = this.ptr;
        this.ptr = 0;

        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_timestamp_free(ptr);
    }
    /**
    * Parses a `Timestamp` from the provided input string.
    * @param {string} input
    * @returns {Timestamp}
    */
    static parse(input) {
        var ptr0 = passStringToWasm0(input, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        var ret = wasm.timestamp_parse(ptr0, len0);
        return Timestamp.__wrap(ret);
    }
    /**
    * Creates a new `Timestamp` with the current date and time.
    * @returns {Timestamp}
    */
    static nowUTC() {
        var ret = wasm.timestamp_nowUTC();
        return Timestamp.__wrap(ret);
    }
    /**
    * Returns the `Timestamp` as an RFC 3339 `String`.
    * @returns {string}
    */
    toRFC3339() {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.timestamp_toRFC3339(retptr, this.ptr);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            return getStringFromWasm0(r0, r1);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
            wasm.__wbindgen_free(r0, r1);
        }
    }
}
/**
*/
export class VerifiableCredential {

    static __wrap(ptr) {
        const obj = Object.create(VerifiableCredential.prototype);
        obj.ptr = ptr;

        return obj;
    }

    toJSON() {
        return {
        };
    }

    toString() {
        return JSON.stringify(this);
    }

    __destroy_into_raw() {
        const ptr = this.ptr;
        this.ptr = 0;

        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_verifiablecredential_free(ptr);
    }
    /**
    * @param {any} value
    * @returns {VerifiableCredential}
    */
    static extend(value) {
        try {
            var ret = wasm.verifiablecredential_extend(addBorrowedObject(value));
            return VerifiableCredential.__wrap(ret);
        } finally {
            heap[stack_pointer++] = undefined;
        }
    }
    /**
    * @param {Document} issuer_doc
    * @param {any} subject_data
    * @param {string | undefined} credential_type
    * @param {string | undefined} credential_id
    * @returns {VerifiableCredential}
    */
    static issue(issuer_doc, subject_data, credential_type, credential_id) {
        try {
            _assertClass(issuer_doc, Document);
            var ptr0 = isLikeNone(credential_type) ? 0 : passStringToWasm0(credential_type, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
            var len0 = WASM_VECTOR_LEN;
            var ptr1 = isLikeNone(credential_id) ? 0 : passStringToWasm0(credential_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
            var len1 = WASM_VECTOR_LEN;
            var ret = wasm.verifiablecredential_issue(issuer_doc.ptr, addBorrowedObject(subject_data), ptr0, len0, ptr1, len1);
            return VerifiableCredential.__wrap(ret);
        } finally {
            heap[stack_pointer++] = undefined;
        }
    }
    /**
    * Serializes a `VerifiableCredential` object as a JSON object.
    * @returns {any}
    */
    toJSON() {
        var ret = wasm.verifiablecredential_toJSON(this.ptr);
        return takeObject(ret);
    }
    /**
    * Deserializes a `VerifiableCredential` object from a JSON object.
    * @param {any} json
    * @returns {VerifiableCredential}
    */
    static fromJSON(json) {
        try {
            var ret = wasm.verifiablecredential_fromJSON(addBorrowedObject(json));
            return VerifiableCredential.__wrap(ret);
        } finally {
            heap[stack_pointer++] = undefined;
        }
    }
}
/**
*/
export class VerifiablePresentation {

    static __wrap(ptr) {
        const obj = Object.create(VerifiablePresentation.prototype);
        obj.ptr = ptr;

        return obj;
    }

    toJSON() {
        return {
        };
    }

    toString() {
        return JSON.stringify(this);
    }

    __destroy_into_raw() {
        const ptr = this.ptr;
        this.ptr = 0;

        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_verifiablepresentation_free(ptr);
    }
    /**
    * @param {Document} holder_doc
    * @param {any} credential_data
    * @param {string | undefined} presentation_type
    * @param {string | undefined} presentation_id
    */
    constructor(holder_doc, credential_data, presentation_type, presentation_id) {
        _assertClass(holder_doc, Document);
        var ptr0 = isLikeNone(presentation_type) ? 0 : passStringToWasm0(presentation_type, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        var ptr1 = isLikeNone(presentation_id) ? 0 : passStringToWasm0(presentation_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len1 = WASM_VECTOR_LEN;
        var ret = wasm.verifiablepresentation_new(holder_doc.ptr, addHeapObject(credential_data), ptr0, len0, ptr1, len1);
        return VerifiablePresentation.__wrap(ret);
    }
    /**
    * Serializes a `VerifiablePresentation` object as a JSON object.
    * @returns {any}
    */
    toJSON() {
        var ret = wasm.verifiablepresentation_toJSON(this.ptr);
        return takeObject(ret);
    }
    /**
    * Deserializes a `VerifiablePresentation` object from a JSON object.
    * @param {any} json
    * @returns {VerifiablePresentation}
    */
    static fromJSON(json) {
        try {
            var ret = wasm.verifiablepresentation_fromJSON(addBorrowedObject(json));
            return VerifiablePresentation.__wrap(ret);
        } finally {
            heap[stack_pointer++] = undefined;
        }
    }
}
/**
*/
export class VerificationMethod {

    static __wrap(ptr) {
        const obj = Object.create(VerificationMethod.prototype);
        obj.ptr = ptr;

        return obj;
    }

    toJSON() {
        return {
            id: this.id,
            controller: this.controller,
            type: this.type,
            data: this.data,
        };
    }

    toString() {
        return JSON.stringify(this);
    }

    __destroy_into_raw() {
        const ptr = this.ptr;
        this.ptr = 0;

        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_verificationmethod_free(ptr);
    }
    /**
    * Creates a new `VerificationMethod` object from the given `key`.
    * @param {KeyPair} key
    * @param {string} fragment
    */
    constructor(key, fragment) {
        _assertClass(key, KeyPair);
        var ptr0 = passStringToWasm0(fragment, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        var ret = wasm.verificationmethod_new(key.ptr, ptr0, len0);
        return VerificationMethod.__wrap(ret);
    }
    /**
    * Creates a new `VerificationMethod` object from the given `did` and `key`.
    * @param {DID} did
    * @param {KeyPair} key
    * @param {string} fragment
    * @returns {VerificationMethod}
    */
    static fromDID(did, key, fragment) {
        _assertClass(did, DID);
        _assertClass(key, KeyPair);
        var ptr0 = passStringToWasm0(fragment, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        var ret = wasm.verificationmethod_fromDID(did.ptr, key.ptr, ptr0, len0);
        return VerificationMethod.__wrap(ret);
    }
    /**
    * Creates a new Merkle Key Collection Method from the given key collection.
    * @param {number} digest
    * @param {DID} did
    * @param {KeyCollection} keys
    * @param {string} fragment
    * @returns {VerificationMethod}
    */
    static createMerkleKey(digest, did, keys, fragment) {
        _assertClass(did, DID);
        _assertClass(keys, KeyCollection);
        var ptr0 = passStringToWasm0(fragment, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        var ret = wasm.verificationmethod_createMerkleKey(digest, did.ptr, keys.ptr, ptr0, len0);
        return VerificationMethod.__wrap(ret);
    }
    /**
    * Returns the `id` `DIDUrl` of the `VerificationMethod` object.
    * @returns {DIDUrl}
    */
    get id() {
        var ret = wasm.verificationmethod_id(this.ptr);
        return DIDUrl.__wrap(ret);
    }
    /**
    * Returns the `controller` `DID` of the `VerificationMethod` object.
    * @returns {DID}
    */
    get controller() {
        var ret = wasm.verificationmethod_controller(this.ptr);
        return DID.__wrap(ret);
    }
    /**
    * Returns the `controller` `DID` of the `VerificationMethod` object.
    * @param {DID} did
    */
    set controller(did) {
        _assertClass(did, DID);
        wasm.verificationmethod_set_controller(this.ptr, did.ptr);
    }
    /**
    * Returns the `VerificationMethod` type.
    * @returns {string}
    */
    get type() {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.verificationmethod_type_(retptr, this.ptr);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            return getStringFromWasm0(r0, r1);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
            wasm.__wbindgen_free(r0, r1);
        }
    }
    /**
    * Returns the `VerificationMethod` public key data.
    * @returns {any}
    */
    get data() {
        var ret = wasm.verificationmethod_data(this.ptr);
        return takeObject(ret);
    }
    /**
    * Serializes a `VerificationMethod` object as a JSON object.
    * @returns {any}
    */
    toJSON() {
        var ret = wasm.verificationmethod_toJSON(this.ptr);
        return takeObject(ret);
    }
    /**
    * Deserializes a `VerificationMethod` object from a JSON object.
    * @param {any} value
    * @returns {VerificationMethod}
    */
    static fromJSON(value) {
        try {
            var ret = wasm.verificationmethod_fromJSON(addBorrowedObject(value));
            return VerificationMethod.__wrap(ret);
        } finally {
            heap[stack_pointer++] = undefined;
        }
    }
}

async function load(module, imports) {
    if (typeof Response === 'function' && module instanceof Response) {
        if (typeof WebAssembly.instantiateStreaming === 'function') {
            try {
                return await WebAssembly.instantiateStreaming(module, imports);

            } catch (e) {
                if (module.headers.get('Content-Type') != 'application/wasm') {
                    console.warn("`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\n", e);

                } else {
                    throw e;
                }
            }
        }

        const bytes = await module.arrayBuffer();
        return await WebAssembly.instantiate(bytes, imports);

    } else {
        const instance = await WebAssembly.instantiate(module, imports);

        if (instance instanceof WebAssembly.Instance) {
            return { instance, module };

        } else {
            return instance;
        }
    }
}

async function initWasm(input) {
    if (typeof input === 'undefined') {
        // input = new URL('identity_wasm_bg.wasm', import.meta.url);
    }
    const imports = {};
    imports.wbg = {};
    imports.wbg.__wbg_resolveddocument_new = function(arg0) {
        var ret = ResolvedDocument.__wrap(arg0);
        return addHeapObject(ret);
    };
    imports.wbg.__wbindgen_string_new = function(arg0, arg1) {
        var ret = getStringFromWasm0(arg0, arg1);
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_diffmessage_new = function(arg0) {
        var ret = DiffMessage.__wrap(arg0);
        return addHeapObject(ret);
    };
    imports.wbg.__wbindgen_object_drop_ref = function(arg0) {
        takeObject(arg0);
    };
    imports.wbg.__wbg_receipt_new = function(arg0) {
        var ret = Receipt.__wrap(arg0);
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_documenthistory_new = function(arg0) {
        var ret = DocumentHistory.__wrap(arg0);
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_diffchainhistory_new = function(arg0) {
        var ret = DiffChainHistory.__wrap(arg0);
        return addHeapObject(ret);
    };
    imports.wbg.__wbindgen_json_parse = function(arg0, arg1) {
        var ret = JSON.parse(getStringFromWasm0(arg0, arg1));
        return addHeapObject(ret);
    };
    imports.wbg.__wbindgen_json_serialize = function(arg0, arg1) {
        const obj = getObject(arg1);
        var ret = JSON.stringify(obj === undefined ? null : obj);
        var ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        getInt32Memory0()[arg0 / 4 + 1] = len0;
        getInt32Memory0()[arg0 / 4 + 0] = ptr0;
    };
    imports.wbg.__wbg_new_693216e109162396 = function() {
        var ret = new Error();
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_stack_0ddaca5d1abfb52f = function(arg0, arg1) {
        var ret = getObject(arg1).stack;
        var ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        getInt32Memory0()[arg0 / 4 + 1] = len0;
        getInt32Memory0()[arg0 / 4 + 0] = ptr0;
    };
    imports.wbg.__wbg_error_09919627ac0992f5 = function(arg0, arg1) {
        try {
            console.error(getStringFromWasm0(arg0, arg1));
        } finally {
            wasm.__wbindgen_free(arg0, arg1);
        }
    };
    imports.wbg.__wbindgen_string_get = function(arg0, arg1) {
        const obj = getObject(arg1);
        var ret = typeof(obj) === 'string' ? obj : undefined;
        var ptr0 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        getInt32Memory0()[arg0 / 4 + 1] = len0;
        getInt32Memory0()[arg0 / 4 + 0] = ptr0;
    };
    imports.wbg.__wbindgen_object_clone_ref = function(arg0) {
        var ret = getObject(arg0);
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_fetch_0436c7fbee32fc7f = function(arg0) {
        var ret = fetch(getObject(arg0));
        return addHeapObject(ret);
    };
    imports.wbg.__wbindgen_cb_drop = function(arg0) {
        const obj = takeObject(arg0).original;
        if (obj.cnt-- == 1) {
            obj.a = 0;
            return true;
        }
        var ret = false;
        return ret;
    };
    imports.wbg.__wbg_setTimeout_df66d951b1726b78 = function() { return handleError(function (arg0, arg1, arg2) {
        var ret = getObject(arg0).setTimeout(getObject(arg1), arg2);
        return ret;
    }, arguments) };
    imports.wbg.__wbg_fetch_b4e81012e07ff95a = function(arg0, arg1) {
        var ret = getObject(arg0).fetch(getObject(arg1));
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_instanceof_Response_e1b11afbefa5b563 = function(arg0) {
        var ret = getObject(arg0) instanceof Response;
        return ret;
    };
    imports.wbg.__wbg_url_50e0bdb6051741be = function(arg0, arg1) {
        var ret = getObject(arg1).url;
        var ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        getInt32Memory0()[arg0 / 4 + 1] = len0;
        getInt32Memory0()[arg0 / 4 + 0] = ptr0;
    };
    imports.wbg.__wbg_status_6d8bb444ddc5a7b2 = function(arg0) {
        var ret = getObject(arg0).status;
        return ret;
    };
    imports.wbg.__wbg_headers_5ffa990806e04cfc = function(arg0) {
        var ret = getObject(arg0).headers;
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_text_8279d34d73e43c68 = function() { return handleError(function (arg0) {
        var ret = getObject(arg0).text();
        return addHeapObject(ret);
    }, arguments) };
    imports.wbg.__wbg_now_559193109055ebad = function(arg0) {
        var ret = getObject(arg0).now();
        return ret;
    };
    imports.wbg.__wbg_newwithstrandinit_9b0fa00478c37287 = function() { return handleError(function (arg0, arg1, arg2) {
        var ret = new Request(getStringFromWasm0(arg0, arg1), getObject(arg2));
        return addHeapObject(ret);
    }, arguments) };
    imports.wbg.__wbg_new_9c35e8e8b09fb4a3 = function() { return handleError(function () {
        var ret = new Headers();
        return addHeapObject(ret);
    }, arguments) };
    imports.wbg.__wbg_append_fb85316567f7a798 = function() { return handleError(function (arg0, arg1, arg2, arg3, arg4) {
        getObject(arg0).append(getStringFromWasm0(arg1, arg2), getStringFromWasm0(arg3, arg4));
    }, arguments) };
    imports.wbg.__wbg_getRandomValues_98117e9a7e993920 = function() { return handleError(function (arg0, arg1) {
        getObject(arg0).getRandomValues(getObject(arg1));
    }, arguments) };
    imports.wbg.__wbg_randomFillSync_64cc7d048f228ca8 = function() { return handleError(function (arg0, arg1, arg2) {
        getObject(arg0).randomFillSync(getArrayU8FromWasm0(arg1, arg2));
    }, arguments) };
    imports.wbg.__wbg_process_2f24d6544ea7b200 = function(arg0) {
        var ret = getObject(arg0).process;
        return addHeapObject(ret);
    };
    imports.wbg.__wbindgen_is_object = function(arg0) {
        const val = getObject(arg0);
        var ret = typeof(val) === 'object' && val !== null;
        return ret;
    };
    imports.wbg.__wbg_versions_6164651e75405d4a = function(arg0) {
        var ret = getObject(arg0).versions;
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_node_4b517d861cbcb3bc = function(arg0) {
        var ret = getObject(arg0).node;
        return addHeapObject(ret);
    };
    imports.wbg.__wbindgen_is_string = function(arg0) {
        var ret = typeof(getObject(arg0)) === 'string';
        return ret;
    };
    imports.wbg.__wbg_modulerequire_3440a4bcf44437db = function() { return handleError(function (arg0, arg1) {
        var ret = module.require(getStringFromWasm0(arg0, arg1));
        return addHeapObject(ret);
    }, arguments) };
    imports.wbg.__wbg_crypto_98fc271021c7d2ad = function(arg0) {
        var ret = getObject(arg0).crypto;
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_msCrypto_a2cdb043d2bfe57f = function(arg0) {
        var ret = getObject(arg0).msCrypto;
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_new_949bbc1147195c4e = function() {
        var ret = new Array();
        return addHeapObject(ret);
    };
    imports.wbg.__wbindgen_is_function = function(arg0) {
        var ret = typeof(getObject(arg0)) === 'function';
        return ret;
    };
    imports.wbg.__wbg_newnoargs_be86524d73f67598 = function(arg0, arg1) {
        var ret = new Function(getStringFromWasm0(arg0, arg1));
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_next_c4151d46d5fa7097 = function(arg0) {
        var ret = getObject(arg0).next;
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_next_7720502039b96d00 = function() { return handleError(function (arg0) {
        var ret = getObject(arg0).next();
        return addHeapObject(ret);
    }, arguments) };
    imports.wbg.__wbg_done_b06cf0578e89ff68 = function(arg0) {
        var ret = getObject(arg0).done;
        return ret;
    };
    imports.wbg.__wbg_value_e74a542443d92451 = function(arg0) {
        var ret = getObject(arg0).value;
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_iterator_4fc4ce93e6b92958 = function() {
        var ret = Symbol.iterator;
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_get_4d0f21c2f823742e = function() { return handleError(function (arg0, arg1) {
        var ret = Reflect.get(getObject(arg0), getObject(arg1));
        return addHeapObject(ret);
    }, arguments) };
    imports.wbg.__wbg_call_888d259a5fefc347 = function() { return handleError(function (arg0, arg1) {
        var ret = getObject(arg0).call(getObject(arg1));
        return addHeapObject(ret);
    }, arguments) };
    imports.wbg.__wbg_new_0b83d3df67ecb33e = function() {
        var ret = new Object();
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_push_284486ca27c6aa8b = function(arg0, arg1) {
        var ret = getObject(arg0).push(getObject(arg1));
        return ret;
    };
    imports.wbg.__wbg_new_342a24ca698edd87 = function(arg0, arg1) {
        var ret = new Error(getStringFromWasm0(arg0, arg1));
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_setname_15d4109043e260cc = function(arg0, arg1, arg2) {
        getObject(arg0).name = getStringFromWasm0(arg1, arg2);
    };
    imports.wbg.__wbg_call_346669c262382ad7 = function() { return handleError(function (arg0, arg1, arg2) {
        var ret = getObject(arg0).call(getObject(arg1), getObject(arg2));
        return addHeapObject(ret);
    }, arguments) };
    imports.wbg.__wbg_now_af172eabe2e041ad = function() {
        var ret = Date.now();
        return ret;
    };
    imports.wbg.__wbg_new_b1d61b5687f5e73a = function(arg0, arg1) {
        try {
            var state0 = {a: arg0, b: arg1};
            var cb0 = (arg0, arg1) => {
                const a = state0.a;
                state0.a = 0;
                try {
                    return __wbg_adapter_296(a, state0.b, arg0, arg1);
                } finally {
                    state0.a = a;
                }
            };
            var ret = new Promise(cb0);
            return addHeapObject(ret);
        } finally {
            state0.a = state0.b = 0;
        }
    };
    imports.wbg.__wbg_resolve_d23068002f584f22 = function(arg0) {
        var ret = Promise.resolve(getObject(arg0));
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_then_2fcac196782070cc = function(arg0, arg1) {
        var ret = getObject(arg0).then(getObject(arg1));
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_then_8c2d62e8ae5978f7 = function(arg0, arg1, arg2) {
        var ret = getObject(arg0).then(getObject(arg1), getObject(arg2));
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_self_c6fbdfc2918d5e58 = function() { return handleError(function () {
        var ret = self.self;
        return addHeapObject(ret);
    }, arguments) };
    imports.wbg.__wbg_window_baec038b5ab35c54 = function() { return handleError(function () {
        var ret = window.window;
        return addHeapObject(ret);
    }, arguments) };
    imports.wbg.__wbg_globalThis_3f735a5746d41fbd = function() { return handleError(function () {
        var ret = globalThis.globalThis;
        return addHeapObject(ret);
    }, arguments) };
    imports.wbg.__wbg_global_1bc0b39582740e95 = function() { return handleError(function () {
        var ret = global.global;
        return addHeapObject(ret);
    }, arguments) };
    imports.wbg.__wbindgen_is_undefined = function(arg0) {
        var ret = getObject(arg0) === undefined;
        return ret;
    };
    imports.wbg.__wbg_buffer_397eaa4d72ee94dd = function(arg0) {
        var ret = getObject(arg0).buffer;
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_newwithbyteoffsetandlength_4b9b8c4e3f5adbff = function(arg0, arg1, arg2) {
        var ret = new Uint8Array(getObject(arg0), arg1 >>> 0, arg2 >>> 0);
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_new_a7ce447f15ff496f = function(arg0) {
        var ret = new Uint8Array(getObject(arg0));
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_set_969ad0a60e51d320 = function(arg0, arg1, arg2) {
        getObject(arg0).set(getObject(arg1), arg2 >>> 0);
    };
    imports.wbg.__wbg_length_1eb8fc608a0d4cdb = function(arg0) {
        var ret = getObject(arg0).length;
        return ret;
    };
    imports.wbg.__wbg_newwithlength_929232475839a482 = function(arg0) {
        var ret = new Uint8Array(arg0 >>> 0);
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_subarray_8b658422a224f479 = function(arg0, arg1, arg2) {
        var ret = getObject(arg0).subarray(arg1 >>> 0, arg2 >>> 0);
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_has_1275b5eec3dc7a7a = function() { return handleError(function (arg0, arg1) {
        var ret = Reflect.has(getObject(arg0), getObject(arg1));
        return ret;
    }, arguments) };
    imports.wbg.__wbg_set_82a4e8a85e31ac42 = function() { return handleError(function (arg0, arg1, arg2) {
        var ret = Reflect.set(getObject(arg0), getObject(arg1), getObject(arg2));
        return ret;
    }, arguments) };
    imports.wbg.__wbg_stringify_d4507a59932eed0c = function() { return handleError(function (arg0) {
        var ret = JSON.stringify(getObject(arg0));
        return addHeapObject(ret);
    }, arguments) };
    imports.wbg.__wbindgen_debug_string = function(arg0, arg1) {
        var ret = debugString(getObject(arg1));
        var ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        getInt32Memory0()[arg0 / 4 + 1] = len0;
        getInt32Memory0()[arg0 / 4 + 0] = ptr0;
    };
    imports.wbg.__wbindgen_throw = function(arg0, arg1) {
        throw new Error(getStringFromWasm0(arg0, arg1));
    };
    imports.wbg.__wbindgen_rethrow = function(arg0) {
        throw takeObject(arg0);
    };
    imports.wbg.__wbindgen_memory = function() {
        var ret = wasm.memory;
        return addHeapObject(ret);
    };
    imports.wbg.__wbindgen_closure_wrapper6491 = function(arg0, arg1, arg2) {
        var ret = makeMutClosure(arg0, arg1, 850, __wbg_adapter_32);
        return addHeapObject(ret);
    };
    imports.wbg.__wbindgen_closure_wrapper7541 = function(arg0, arg1, arg2) {
        var ret = makeMutClosure(arg0, arg1, 1097, __wbg_adapter_35);
        return addHeapObject(ret);
    };

    if (typeof input === 'string' || (typeof Request === 'function' && input instanceof Request) || (typeof URL === 'function' && input instanceof URL)) {
        input = fetch(input);
    }



    const { instance, module } = await load(await input, imports);

    wasm = instance.exports;
    initWasm.__wbindgen_wasm_module = module;
    wasm.__wbindgen_start();
    return wasm;
}

let __initializedIotaWasm = false

export function init(path) {
    if (__initializedIotaWasm) {
        return Promise.resolve(wasm)
    }
    return initWasm(path || 'identity_wasm_bg.wasm').then(() => {
        __initializedIotaWasm = true
        return wasm
    })
}


