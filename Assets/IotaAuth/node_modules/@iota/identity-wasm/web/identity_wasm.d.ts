/* tslint:disable */
/* eslint-disable */
/**
* Initializes the console error panic hook for better error messages
*/
export function start(): void;
/**
*/
export enum KeyType {
  Ed25519,
}
/**
*/
export enum DIDMessageEncoding {
  Json,
  JsonBrotli,
}
/**
*/
export enum Digest {
  Sha256,
  Blake2b256,
}
/**
*/
export class Client {
  free(): void;
/**
* Creates a new `Client` with default settings.
*/
  constructor();
/**
* Creates a new `Client` with settings from the given `Config`.
* @param {Config} config
* @returns {Client}
*/
  static fromConfig(config: Config): Client;
/**
* Creates a new `Client` with default settings for the given `Network`.
* @param {Network} network
* @returns {Client}
*/
  static fromNetwork(network: Network): Client;
/**
* Returns the `Client` Tangle network.
* @returns {Network}
*/
  network(): Network;
/**
* Publishes an `IotaDocument` to the Tangle.
* @param {Document} document
* @returns {Promise<Receipt>}
*/
  publishDocument(document: Document): Promise<Receipt>;
/**
* Publishes a `DiffMessage` to the Tangle.
* @param {string} message_id
* @param {DiffMessage} diff
* @returns {Promise<Receipt>}
*/
  publishDiff(message_id: string, diff: DiffMessage): Promise<Receipt>;
/**
* Publishes arbitrary JSON data to the specified index on the Tangle.
* @param {string} index
* @param {any} data
* @returns {Promise<Receipt>}
*/
  publishJSON(index: string, data: any): Promise<Receipt>;
/**
* Publishes arbitrary JSON data to the specified index on the Tangle.
* Retries (promotes or reattaches) the message until itâ€™s included (referenced by a milestone).
* Default interval is 5 seconds and max attempts is 40.
* @param {string} index
* @param {any} data
* @param {number | undefined} interval
* @param {number | undefined} max_attempts
* @returns {Promise<any>}
*/
  publishJsonWithRetry(index: string, data: any, interval?: number, max_attempts?: number): Promise<any>;
/**
* Fetch the DID document specified by the given `DID`.
* @param {string} did
* @returns {Promise<ResolvedDocument>}
*/
  resolve(did: string): Promise<ResolvedDocument>;
/**
* Returns the message history of the given DID.
* @param {string} did
* @returns {Promise<DocumentHistory>}
*/
  resolveHistory(did: string): Promise<DocumentHistory>;
/**
* Returns the `DiffChainHistory` of a diff chain starting from a document on the
* integration chain.
*
* NOTE: the document must have been published to the tangle and have a valid message id and
* capability invocation method.
* @param {ResolvedDocument} document
* @returns {Promise<DiffChainHistory>}
*/
  resolveDiffHistory(document: ResolvedDocument): Promise<DiffChainHistory>;
/**
* Validates a credential with the DID Document from the Tangle.
* @param {string} data
* @returns {Promise<any>}
*/
  checkCredential(data: string): Promise<any>;
/**
* Validates a presentation with the DID Document from the Tangle.
* @param {string} data
* @returns {Promise<any>}
*/
  checkPresentation(data: string): Promise<any>;
}
/**
*/
export class Config {
  free(): void;
/**
*/
  constructor();
/**
* @param {Network} network
* @returns {Config}
*/
  static fromNetwork(network: Network): Config;
/**
* @param {Network} network
*/
  setNetwork(network: Network): void;
/**
* @param {string} url
*/
  setNode(url: string): void;
/**
* @param {number} encoding
*/
  setEncoding(encoding: number): void;
/**
* @param {string} url
* @param {string | undefined} jwt
* @param {string | undefined} username
* @param {string | undefined} password
*/
  setPrimaryNode(url: string, jwt?: string, username?: string, password?: string): void;
/**
* @param {string} url
* @param {string | undefined} jwt
* @param {string | undefined} username
* @param {string | undefined} password
*/
  setPrimaryPoWNode(url: string, jwt?: string, username?: string, password?: string): void;
/**
* @param {string} url
* @param {string | undefined} jwt
* @param {string | undefined} username
* @param {string | undefined} password
*/
  setPermanode(url: string, jwt?: string, username?: string, password?: string): void;
/**
* @param {string} url
* @param {string | undefined} jwt
* @param {string | undefined} username
* @param {string | undefined} password
*/
  setNodeAuth(url: string, jwt?: string, username?: string, password?: string): void;
/**
* @param {number} value
*/
  setNodeSyncInterval(value: number): void;
/**
*/
  setNodeSyncDisabled(): void;
/**
* @param {boolean} value
*/
  setQuorum(value: boolean): void;
/**
* @param {number} value
*/
  setQuorumSize(value: number): void;
/**
* @param {number} value
*/
  setQuorumThreshold(value: number): void;
/**
* @param {boolean} value
*/
  setLocalPoW(value: boolean): void;
/**
* @param {number} value
*/
  setTipsInterval(value: number): void;
/**
* @param {number} value
*/
  setRequestTimeout(value: number): void;
}
/**
* @typicalname did
*/
export class DID {
  free(): void;
/**
* Creates a new `DID` from a `KeyPair` object.
* @param {KeyPair} key
* @param {string | undefined} network
*/
  constructor(key: KeyPair, network?: string);
/**
* Creates a new `DID` from a base58-encoded public key.
* @param {string} key
* @param {string | undefined} network
* @returns {DID}
*/
  static fromBase58(key: string, network?: string): DID;
/**
* Parses a `DID` from the input string.
* @param {string} input
* @returns {DID}
*/
  static parse(input: string): DID;
/**
* Construct a new `DIDUrl` by joining with a relative DID Url string.
* @param {string} segment
* @returns {DIDUrl}
*/
  join(segment: string): DIDUrl;
/**
* Clones the `DID` into a `DIDUrl`.
* @returns {DIDUrl}
*/
  toUrl(): DIDUrl;
/**
* Converts the `DID` into a `DIDUrl`.
* @returns {DIDUrl}
*/
  intoUrl(): DIDUrl;
/**
* Returns the `DID` as a string.
* @returns {string}
*/
  toString(): string;
/**
* Returns the IOTA tangle network of the `DID`.
* @returns {Network}
*/
  readonly network: Network;
/**
* Returns the IOTA tangle network of the `DID`.
* @returns {string}
*/
  readonly networkName: string;
/**
* Returns the unique tag of the `DID`.
* @returns {string}
*/
  readonly tag: string;
}
/**
* @typicalname didUrl
*/
export class DIDUrl {
  free(): void;
/**
* Parses a `DIDUrl` from the input string.
* @param {string} input
* @returns {DIDUrl}
*/
  static parse(input: string): DIDUrl;
/**
* Append a string representing a path, query, and/or fragment to this `DIDUrl`.
*
* Must begin with a valid delimiter character: '/', '?', '#'. Overwrites the existing URL
* segment and any following segments in order of path, query, then fragment.
*
* I.e.
* - joining a path will clear the query and fragment.
* - joining a query will clear the fragment.
* - joining a fragment will only overwrite the fragment.
* @param {string} segment
* @returns {DIDUrl}
*/
  join(segment: string): DIDUrl;
/**
* Returns the `DIDUrl` as a string.
* @returns {string}
*/
  toString(): string;
/**
* Return the `DID` section of the `DIDUrl`.
*
* Note: clones the data
* @returns {DID}
*/
  readonly did: DID;
/**
* Returns the `DIDUrl` method fragment, if any. Excludes the leading '#'.
* @returns {string | undefined}
*/
  fragment?: string;
/**
* Returns the `DIDUrl` path.
* @returns {string | undefined}
*/
  path?: string;
/**
* Returns the `DIDUrl` method query, if any. Excludes the leading '?'.
* @returns {string | undefined}
*/
  query?: string;
/**
* Return the relative DID Url as a string, including only the path, query, and fragment.
* @returns {string}
*/
  readonly url_str: string;
}
/**
*/
export class DiffChainHistory {
  free(): void;
/**
* Returns an `Array` of the diff chain `DiffMessages`.
*
* NOTE: this clones the field.
* @returns {Array<DiffMessage>}
*/
  chainData(): Array<DiffMessage>;
/**
* Returns an `Array` of `MessageIds` as strings.
*
* NOTE: this clones the field.
* @returns {Array<string>}
*/
  spam(): Array<string>;
/**
* Serializes as a JSON object.
* @returns {any}
*/
  toJSON(): any;
/**
* Deserializes from a JSON object.
* @param {any} json
* @returns {DiffChainHistory}
*/
  static fromJSON(json: any): DiffChainHistory;
}
/**
* Defines the difference between two DID `Document`s' JSON representations.
*/
export class DiffMessage {
  free(): void;
/**
* Returns the DID of the associated DID Document.
*
* NOTE: clones the data.
* @returns {DID}
*/
  id(): DID;
/**
* Returns a new DID Document which is the result of merging `self`
* with the given Document.
* @param {Document} document
* @returns {Document}
*/
  merge(document: Document): Document;
/**
* Returns the DID of the associated DID Document.
* @returns {DID}
*/
  readonly did: DID;
/**
* Returns the raw contents of the DID Document diff.
*
* NOTE: clones the data.
* @returns {string}
*/
  readonly diff: string;
/**
* Returns the message_id of the DID Document diff.
* @returns {string}
*/
  messageId: string;
/**
* Returns the Tangle message id of the previous DID Document diff.
* @returns {string}
*/
  previousMessageId: string;
/**
* Returns the `proof` object.
* @returns {any}
*/
  readonly proof: any;
}
/**
*/
export class Document {
  free(): void;
/**
* Creates a new DID Document from the given `KeyPair`, network, and verification method
* fragment name.
*
* The DID Document will be pre-populated with a single verification method
* derived from the provided `KeyPair` embedded as a capability invocation
* verification relationship. This method will have the DID URL fragment
* `#sign-0` by default and can be easily retrieved with `Document::defaultSigningMethod`.
*
* NOTE: the generated document is unsigned, see `Document::signSelf`.
*
* Arguments:
*
* * keypair: the initial verification method is derived from the public key with this keypair.
* * network: Tangle network to use for the DID, default `Network::mainnet`.
* * fragment: name of the initial verification method, default "sign-0".
* @param {KeyPair} keypair
* @param {string | undefined} network
* @param {string | undefined} fragment
*/
  constructor(keypair: KeyPair, network?: string, fragment?: string);
/**
* Creates a new DID Document from the given `VerificationMethod`.
*
* NOTE: the generated document is unsigned, see `Document::signSelf`.
* @param {VerificationMethod} method
* @returns {Document}
*/
  static fromVerificationMethod(method: VerificationMethod): Document;
/**
* Add a new `Service` to the document.
* @param {Service} service
* @returns {boolean}
*/
  insertService(service: Service): boolean;
/**
* Remove a `Service` identified by the given `DIDUrl` from the document.
* @param {DIDUrl} did
*/
  removeService(did: DIDUrl): void;
/**
* Adds a new Verification Method to the DID Document.
* @param {VerificationMethod} method
* @param {string | undefined} scope
*/
  insertMethod(method: VerificationMethod, scope?: string): void;
/**
* Removes all references to the specified Verification Method.
* @param {DIDUrl} did
*/
  removeMethod(did: DIDUrl): void;
/**
* Returns the first `VerificationMethod` with a capability invocation relationship
* capable of signing this DID document.
*
* Throws an error if no signing method is present.
* @returns {VerificationMethod}
*/
  defaultSigningMethod(): VerificationMethod;
/**
* Returns the first `VerificationMethod` with an `id` property
* matching the provided `query`.
*
* Throws an error if the method is not found.
* @param {string} query
* @returns {VerificationMethod}
*/
  resolveMethod(query: string): VerificationMethod;
/**
* @param {string} query
* @param {number} index
* @returns {boolean}
*/
  revokeMerkleKey(query: string, index: number): boolean;
/**
* Signs the DID document with the verification method specified by `method_query`.
* The `method_query` may be the full `DIDUrl` of the method or just its fragment,
* e.g. "#sign-0".
*
* NOTE: does not validate whether the private key of the given `key_pair` corresponds to the
* verification method. See `Document::verifySelfSigned`.
* @param {KeyPair} key_pair
* @param {string} method_query
*/
  signSelf(key_pair: KeyPair, method_query: string): void;
/**
* Verifies a self-signed signature on this DID document.
* @returns {boolean}
*/
  verifySelfSigned(): boolean;
/**
* Verifies whether `document` is a valid root DID document according to the IOTA DID method
* specification.
*
* It must be signed using a verification method with a public key whose BLAKE2b-256 hash matches
* the DID tag.
* @param {Document} document
*/
  static verifyRootDocument(document: Document): void;
/**
* @param {any} data
* @param {any} args
* @returns {VerifiableCredential}
*/
  signCredential(data: any, args: any): VerifiableCredential;
/**
* @param {any} data
* @param {any} args
* @returns {VerifiablePresentation}
*/
  signPresentation(data: any, args: any): VerifiablePresentation;
/**
* Creates a signature for the given `data` with the specified DID Document
* Verification Method.
*
* An additional `proof` property is required if using a Merkle Key
* Collection verification Method.
* @param {any} data
* @param {any} args
* @returns {any}
*/
  signData(data: any, args: any): any;
/**
* Verifies the authenticity of `data` using the target verification method.
* @param {any} data
* @returns {boolean}
*/
  verifyData(data: any): boolean;
/**
* Verifies the signature of the provided `data` was created using a verification method
* in this DID Document with the verification relationship specified by `scope`.
* @param {any} data
* @param {string} scope
* @returns {boolean}
*/
  verifyDataWithScope(data: any, scope: string): boolean;
/**
* Generate a `DiffMessage` between two DID Documents and sign it using the specified
* `key` and `method`.
* @param {Document} other
* @param {string} message
* @param {KeyPair} key
* @param {string} method
* @returns {DiffMessage}
*/
  diff(other: Document, message: string, key: KeyPair, method: string): DiffMessage;
/**
* Verifies the signature of the `diff` was created using a capability invocation method
* in this DID Document.
*
* # Errors
*
* Fails if an unsupported verification method is used or the verification operation fails.
* @param {DiffMessage} diff
*/
  verifyDiff(diff: DiffMessage): void;
/**
* Verifies a `DiffMessage` signature and attempts to merge the changes into `self`.
* @param {DiffMessage} diff
*/
  merge_diff(diff: DiffMessage): void;
/**
* Returns the Tangle index of the integration chain for this DID.
*
* This is simply the tag segment of the `DID`.
* E.g.
* For a document with DID: did:iota:1234567890abcdefghijklmnopqrstuvxyzABCDEFGHI,
* `doc.integration_index()` == "1234567890abcdefghijklmnopqrstuvxyzABCDEFGHI"
* @returns {string}
*/
  integrationIndex(): string;
/**
* Returns the Tangle index of the DID diff chain. This should only be called on documents
* published on the integration chain.
*
* This is the Base58-btc encoded SHA-256 digest of the hex-encoded message id.
* @param {string} message_id
* @returns {string}
*/
  static diffIndex(message_id: string): string;
/**
* Serializes a `Document` object as a JSON object.
* @returns {any}
*/
  toJSON(): any;
/**
* Deserializes a `Document` object from a JSON object.
* @param {any} json
* @returns {Document}
*/
  static fromJSON(json: any): Document;
/**
* Returns the DID Document `id`.
* @returns {DID}
*/
  readonly id: DID;
/**
* Returns the metadata associated with this document.
*
* NOTE: clones the data. Use the `metadataCreated`, `metadataUpdated`,
* `metadataPreviousMessageId`, `metadataProof` properties instead.
* @returns {DocumentMetadata}
*/
  readonly metadata: DocumentMetadata;
/**
* Returns the timestamp of when the DID document was created.
* @returns {Timestamp}
*/
  metadataCreated: Timestamp;
/**
* Returns the previous integration chain message id.
* @returns {string}
*/
  metadataPreviousMessageId: string;
/**
* Returns the `proof` object.
* @returns {any}
*/
  readonly metadataProof: any;
/**
* Returns the timestamp of the last DID document update.
* @returns {Timestamp}
*/
  metadataUpdated: Timestamp;
}
/**
* A DID Document's history and current state.
*/
export class DocumentHistory {
  free(): void;
/**
* Returns an `Array` of integration chain `Documents`.
*
* NOTE: clones the data.
* @returns {Array<ResolvedDocument>}
*/
  integrationChainData(): Array<ResolvedDocument>;
/**
* Returns an `Array` of message id strings for "spam" messages on the same index
* as the integration chain.
*
* NOTE: clones the data.
* @returns {Array<string>}
*/
  integrationChainSpam(): Array<string>;
/**
* Returns an `Array` of diff chain `DiffMessages`.
*
* NOTE: clones the data.
* @returns {Array<DiffMessage>}
*/
  diffChainData(): Array<DiffMessage>;
/**
* Returns an `Array` of message id strings for "spam" messages on the same index
* as the diff chain.
*
* NOTE: clones the data.
* @returns {Array<string>}
*/
  diffChainSpam(): Array<string>;
/**
* Serializes `DocumentHistory` as a JSON object.
* @returns {any}
*/
  toJSON(): any;
/**
* Deserializes `DocumentHistory` from a JSON object.
* @param {any} json
* @returns {DocumentHistory}
*/
  static fromJSON(json: any): DocumentHistory;
}
/**
* Additional attributes related to an IOTA DID Document.
*/
export class DocumentMetadata {
  free(): void;
/**
* Returns the timestamp of when the DID document was created.
* @returns {Timestamp}
*/
  readonly created: Timestamp;
/**
* @returns {string}
*/
  readonly previousMessageId: string;
/**
* Returns a reference to the `proof`.
* @returns {any}
*/
  readonly proof: any;
/**
* Returns the timestamp of the last DID document update.
* @returns {Timestamp}
*/
  readonly updated: Timestamp;
}
/**
*/
export class ExplorerUrl {
  free(): void;
/**
* Constructs a new Tangle explorer URL from a string.
*
* Use `ExplorerUrl::mainnet` or `ExplorerUrl::devnet` unless using a private Tangle
* or local explorer.
* @param {string} url
* @returns {ExplorerUrl}
*/
  static parse(url: string): ExplorerUrl;
/**
* Returns the Tangle explorer URL for the mainnet.
* @returns {ExplorerUrl}
*/
  static mainnet(): ExplorerUrl;
/**
* Returns the Tangle explorer URL for the devnet.
* @returns {ExplorerUrl}
*/
  static devnet(): ExplorerUrl;
/**
* Returns the web explorer URL of the given `message_id`.
*
* E.g. https://explorer.iota.org/mainnet/message/{message_id}
* @param {string} message_id
* @returns {string}
*/
  messageUrl(message_id: string): string;
/**
* Returns the web identity resolver URL for the given DID.
*
* E.g. https://explorer.iota.org/mainnet/identity-resolver/{did}
* @param {string} did
* @returns {string}
*/
  resolverUrl(did: string): string;
/**
* @returns {string}
*/
  toString(): string;
}
/**
*/
export class IntegrationChainHistory {
  free(): void;
/**
* Returns an `Array` of the integration chain `Documents`.
*
* NOTE: this clones the field.
* @returns {Array<ResolvedDocument>}
*/
  chainData(): Array<ResolvedDocument>;
/**
* Returns an `Array` of `MessageIds` as strings.
*
* NOTE: this clones the field.
* @returns {Array<string>}
*/
  spam(): Array<string>;
/**
* Serializes as a JSON object.
* @returns {any}
*/
  toJSON(): any;
/**
* Deserializes from a JSON object.
* @param {any} json
* @returns {IntegrationChainHistory}
*/
  static fromJSON(json: any): IntegrationChainHistory;
}
/**
*/
export class KeyCollection {
  free(): void;
/**
* Creates a new `KeyCollection` with the specified key type.
* @param {number} type_
* @param {number} count
*/
  constructor(type_: number, count: number);
/**
* Returns `true` if the collection contains no keys.
* @returns {boolean}
*/
  isEmpty(): boolean;
/**
* Returns the keypair at the specified `index`.
* @param {number} index
* @returns {KeyPair | undefined}
*/
  keypair(index: number): KeyPair | undefined;
/**
* Returns the public key at the specified `index` as a base58-encoded string.
* @param {number} index
* @returns {string | undefined}
*/
  public(index: number): string | undefined;
/**
* Returns the private key at the specified `index` as a base58-encoded string.
* @param {number} index
* @returns {string | undefined}
*/
  private(index: number): string | undefined;
/**
* @param {number} digest
* @returns {string}
*/
  merkleRoot(digest: number): string;
/**
* @param {number} digest
* @param {number} index
* @returns {string | undefined}
*/
  merkleProof(digest: number, index: number): string | undefined;
/**
* Serializes a `KeyCollection` object as a JSON object.
* @returns {any}
*/
  toJSON(): any;
/**
* Deserializes a `KeyCollection` object from a JSON object.
* @param {any} json
* @returns {KeyCollection}
*/
  static fromJSON(json: any): KeyCollection;
/**
* Returns the number of keys in the collection.
* @returns {number}
*/
  readonly length: number;
}
/**
*/
export class KeyPair {
  free(): void;
/**
* Generates a new `KeyPair` object.
* @param {number} type_
*/
  constructor(type_: number);
/**
* Parses a `KeyPair` object from base58-encoded public/private keys.
* @param {number} type_
* @param {string} public_key
* @param {string} private_key
* @returns {KeyPair}
*/
  static fromBase58(type_: number, public_key: string, private_key: string): KeyPair;
/**
* Serializes a `KeyPair` object as a JSON object.
* @returns {any}
*/
  toJSON(): any;
/**
* Deserializes a `KeyPair` object from a JSON object.
* @param {any} json
* @returns {KeyPair}
*/
  static fromJSON(json: any): KeyPair;
/**
* Returns the private key as a base58-encoded string.
* @returns {string}
*/
  readonly private: string;
/**
* Returns the public key as a base58-encoded string.
* @returns {string}
*/
  readonly public: string;
}
/**
*/
export class Network {
  free(): void;
/**
* Parses the provided string to a `Network`.
* @param {string} name
* @returns {Network}
*/
  static try_from_name(name: string): Network;
/**
* @returns {Network}
*/
  static mainnet(): Network;
/**
* @returns {Network}
*/
  static devnet(): Network;
/**
* @returns {string}
*/
  toString(): string;
/**
* Returns the node URL of the Tangle network.
* @returns {string | undefined}
*/
  readonly defaultNodeURL: string | undefined;
}
/**
*/
export class Receipt {
  free(): void;
/**
* Serializes a `Receipt` as a JSON object.
* @returns {any}
*/
  toJSON(): any;
/**
* Deserializes a `Receipt` from a JSON object.
* @param {any} json
* @returns {Receipt}
*/
  static fromJSON(json: any): Receipt;
/**
* Returns the message `id`.
* @returns {string}
*/
  readonly messageId: string;
/**
* Returns the associated IOTA Tangle `Network`.
* @returns {Network}
*/
  readonly network: Network;
/**
* Returns the message `network_id`.
* @returns {string}
*/
  readonly networkId: string;
/**
* Returns the message `nonce`.
* @returns {string}
*/
  readonly nonce: string;
}
/**
* An IOTA DID document resolved from the Tangle. Represents an integration chain message possibly
* merged with one or more `DiffMessages`.
*/
export class ResolvedDocument {
  free(): void;
/**
* Attempts to merge changes from a `DiffMessage` into this document and
* updates the `ResolvedDocument::diffMessageId`.
*
* If merging fails the document remains unmodified, otherwise this represents
* the merged document state.
*
* See `Document::mergeDiff`.
*
* # Errors
*
* Fails if the merge operation or signature verification on the diff fails.
* @param {DiffMessage} diff_message
*/
  mergeDiffMessage(diff_message: DiffMessage): void;
/**
* Consumes this object and returns the inner DID document.
*
* NOTE: trying to use the `ResolvedDocument` after calling this will throw an error.
* @returns {Document}
*/
  intoDocument(): Document;
/**
* Serializes a `Document` object as a JSON object.
* @returns {any}
*/
  toJSON(): any;
/**
* Deserializes a `Document` object from a JSON object.
* @param {any} json
* @returns {ResolvedDocument}
*/
  static fromJSON(json: any): ResolvedDocument;
/**
* Returns the diff chain message id.
* @returns {string}
*/
  diffMessageId: string;
/**
* Returns the inner DID document.
*
* NOTE: clones the data. Use `intoDocument()` for efficiency.
* @returns {Document}
*/
  readonly document: Document;
/**
* Sets the integration chain message id.
* @param {string} value
*/
  integrationMessageId: string;
/**
* Returns the integration chain message id.
* @returns {string}
*/
  readonly metadataPreviousMessageId: string;
}
/**
*/
export class Service {
  free(): void;
/**
* Serializes a `Service` object as a JSON object.
* @returns {any}
*/
  toJSON(): any;
/**
* Deserializes a `Service` object from a JSON object.
* @param {any} value
* @returns {Service}
*/
  static fromJSON(value: any): Service;
}
/**
*/
export class Timestamp {
  free(): void;
/**
* Parses a `Timestamp` from the provided input string.
* @param {string} input
* @returns {Timestamp}
*/
  static parse(input: string): Timestamp;
/**
* Creates a new `Timestamp` with the current date and time.
* @returns {Timestamp}
*/
  static nowUTC(): Timestamp;
/**
* Returns the `Timestamp` as an RFC 3339 `String`.
* @returns {string}
*/
  toRFC3339(): string;
}
/**
*/
export class VerifiableCredential {
  free(): void;
/**
* @param {any} value
* @returns {VerifiableCredential}
*/
  static extend(value: any): VerifiableCredential;
/**
* @param {Document} issuer_doc
* @param {any} subject_data
* @param {string | undefined} credential_type
* @param {string | undefined} credential_id
* @returns {VerifiableCredential}
*/
  static issue(issuer_doc: Document, subject_data: any, credential_type?: string, credential_id?: string): VerifiableCredential;
/**
* Serializes a `VerifiableCredential` object as a JSON object.
* @returns {any}
*/
  toJSON(): any;
/**
* Deserializes a `VerifiableCredential` object from a JSON object.
* @param {any} json
* @returns {VerifiableCredential}
*/
  static fromJSON(json: any): VerifiableCredential;
}
/**
*/
export class VerifiablePresentation {
  free(): void;
/**
* @param {Document} holder_doc
* @param {any} credential_data
* @param {string | undefined} presentation_type
* @param {string | undefined} presentation_id
*/
  constructor(holder_doc: Document, credential_data: any, presentation_type?: string, presentation_id?: string);
/**
* Serializes a `VerifiablePresentation` object as a JSON object.
* @returns {any}
*/
  toJSON(): any;
/**
* Deserializes a `VerifiablePresentation` object from a JSON object.
* @param {any} json
* @returns {VerifiablePresentation}
*/
  static fromJSON(json: any): VerifiablePresentation;
}
/**
*/
export class VerificationMethod {
  free(): void;
/**
* Creates a new `VerificationMethod` object from the given `key`.
* @param {KeyPair} key
* @param {string} fragment
*/
  constructor(key: KeyPair, fragment: string);
/**
* Creates a new `VerificationMethod` object from the given `did` and `key`.
* @param {DID} did
* @param {KeyPair} key
* @param {string} fragment
* @returns {VerificationMethod}
*/
  static fromDID(did: DID, key: KeyPair, fragment: string): VerificationMethod;
/**
* Creates a new Merkle Key Collection Method from the given key collection.
* @param {number} digest
* @param {DID} did
* @param {KeyCollection} keys
* @param {string} fragment
* @returns {VerificationMethod}
*/
  static createMerkleKey(digest: number, did: DID, keys: KeyCollection, fragment: string): VerificationMethod;
/**
* Serializes a `VerificationMethod` object as a JSON object.
* @returns {any}
*/
  toJSON(): any;
/**
* Deserializes a `VerificationMethod` object from a JSON object.
* @param {any} value
* @returns {VerificationMethod}
*/
  static fromJSON(value: any): VerificationMethod;
/**
* Returns the `controller` `DID` of the `VerificationMethod` object.
* @returns {DID}
*/
  controller: DID;
/**
* Returns the `VerificationMethod` public key data.
* @returns {any}
*/
  readonly data: any;
/**
* Returns the `id` `DIDUrl` of the `VerificationMethod` object.
* @returns {DIDUrl}
*/
  readonly id: DIDUrl;
/**
* Returns the `VerificationMethod` type.
* @returns {string}
*/
  readonly type: string;
}

export type InitInput = RequestInfo | URL | Response | BufferSource | WebAssembly.Module;

export interface InitOutput {
  readonly memory: WebAssembly.Memory;
  readonly __wbg_did_free: (a: number) => void;
  readonly did_new: (a: number, b: number, c: number) => number;
  readonly did_fromBase58: (a: number, b: number, c: number, d: number) => number;
  readonly did_parse: (a: number, b: number) => number;
  readonly did_network: (a: number) => number;
  readonly did_network_name: (a: number, b: number) => void;
  readonly did_tag: (a: number, b: number) => void;
  readonly did_join: (a: number, b: number, c: number) => number;
  readonly did_toUrl: (a: number) => number;
  readonly did_intoUrl: (a: number) => number;
  readonly did_toString: (a: number, b: number) => void;
  readonly __wbg_didurl_free: (a: number) => void;
  readonly didurl_parse: (a: number, b: number) => number;
  readonly didurl_did: (a: number) => number;
  readonly didurl_url_str: (a: number, b: number) => void;
  readonly didurl_fragment: (a: number, b: number) => void;
  readonly didurl_set_fragment: (a: number, b: number, c: number) => void;
  readonly didurl_path: (a: number, b: number) => void;
  readonly didurl_set_path: (a: number, b: number, c: number) => void;
  readonly didurl_query: (a: number, b: number) => void;
  readonly didurl_set_query: (a: number, b: number, c: number) => void;
  readonly didurl_join: (a: number, b: number, c: number) => number;
  readonly didurl_toString: (a: number, b: number) => void;
  readonly __wbg_diffmessage_free: (a: number) => void;
  readonly diffmessage_id: (a: number) => number;
  readonly diffmessage_did: (a: number) => number;
  readonly diffmessage_diff: (a: number, b: number) => void;
  readonly diffmessage_message_id: (a: number, b: number) => void;
  readonly diffmessage_set_message_id: (a: number, b: number, c: number) => void;
  readonly diffmessage_previous_message_id: (a: number, b: number) => void;
  readonly diffmessage_set_previous_message_id: (a: number, b: number, c: number) => void;
  readonly diffmessage_proof: (a: number) => number;
  readonly diffmessage_merge: (a: number, b: number) => number;
  readonly __wbg_documentmetadata_free: (a: number) => void;
  readonly documentmetadata_created: (a: number) => number;
  readonly documentmetadata_updated: (a: number) => number;
  readonly documentmetadata_previous_message_id: (a: number, b: number) => void;
  readonly documentmetadata_proof: (a: number) => number;
  readonly __wbg_client_free: (a: number) => void;
  readonly client_new: () => number;
  readonly client_fromConfig: (a: number) => number;
  readonly client_fromNetwork: (a: number) => number;
  readonly client_network: (a: number) => number;
  readonly client_publishDocument: (a: number, b: number) => number;
  readonly client_publishDiff: (a: number, b: number, c: number, d: number) => number;
  readonly client_publishJSON: (a: number, b: number, c: number, d: number) => number;
  readonly client_publishJsonWithRetry: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number) => number;
  readonly client_resolve: (a: number, b: number, c: number) => number;
  readonly client_resolveHistory: (a: number, b: number, c: number) => number;
  readonly client_resolveDiffHistory: (a: number, b: number) => number;
  readonly client_checkCredential: (a: number, b: number, c: number) => number;
  readonly client_checkPresentation: (a: number, b: number, c: number) => number;
  readonly __wbg_network_free: (a: number) => void;
  readonly network_try_from_name: (a: number, b: number) => number;
  readonly network_mainnet: () => number;
  readonly network_devnet: () => number;
  readonly network_default_node_url: (a: number, b: number) => void;
  readonly network_toString: (a: number, b: number) => void;
  readonly __wbg_keycollection_free: (a: number) => void;
  readonly keycollection_new: (a: number, b: number) => number;
  readonly keycollection_length: (a: number) => number;
  readonly keycollection_isEmpty: (a: number) => number;
  readonly keycollection_keypair: (a: number, b: number) => number;
  readonly keycollection_public: (a: number, b: number, c: number) => void;
  readonly keycollection_private: (a: number, b: number, c: number) => void;
  readonly keycollection_merkleRoot: (a: number, b: number, c: number) => void;
  readonly keycollection_merkleProof: (a: number, b: number, c: number, d: number) => void;
  readonly keycollection_toJSON: (a: number) => number;
  readonly keycollection_fromJSON: (a: number) => number;
  readonly __wbg_timestamp_free: (a: number) => void;
  readonly timestamp_parse: (a: number, b: number) => number;
  readonly timestamp_nowUTC: () => number;
  readonly timestamp_toRFC3339: (a: number, b: number) => void;
  readonly __wbg_verifiablepresentation_free: (a: number) => void;
  readonly verifiablepresentation_new: (a: number, b: number, c: number, d: number, e: number, f: number) => number;
  readonly verifiablepresentation_toJSON: (a: number) => number;
  readonly verifiablepresentation_fromJSON: (a: number) => number;
  readonly __wbg_config_free: (a: number) => void;
  readonly config_new: () => number;
  readonly config_fromNetwork: (a: number) => number;
  readonly config_setNetwork: (a: number, b: number) => void;
  readonly config_setNode: (a: number, b: number, c: number) => void;
  readonly config_setEncoding: (a: number, b: number) => void;
  readonly config_setPrimaryNode: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number) => void;
  readonly config_setPrimaryPoWNode: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number) => void;
  readonly config_setPermanode: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number) => void;
  readonly config_setNodeAuth: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number) => void;
  readonly config_setNodeSyncInterval: (a: number, b: number) => void;
  readonly config_setNodeSyncDisabled: (a: number) => void;
  readonly config_setQuorum: (a: number, b: number) => void;
  readonly config_setQuorumSize: (a: number, b: number) => void;
  readonly config_setQuorumThreshold: (a: number, b: number) => void;
  readonly config_setLocalPoW: (a: number, b: number) => void;
  readonly config_setTipsInterval: (a: number, b: number) => void;
  readonly config_setRequestTimeout: (a: number, b: number) => void;
  readonly __wbg_verifiablecredential_free: (a: number) => void;
  readonly verifiablecredential_extend: (a: number) => number;
  readonly verifiablecredential_issue: (a: number, b: number, c: number, d: number, e: number, f: number) => number;
  readonly verifiablecredential_toJSON: (a: number) => number;
  readonly verifiablecredential_fromJSON: (a: number) => number;
  readonly __wbg_document_free: (a: number) => void;
  readonly document_new: (a: number, b: number, c: number, d: number, e: number) => number;
  readonly document_fromVerificationMethod: (a: number) => number;
  readonly document_id: (a: number) => number;
  readonly document_insertService: (a: number, b: number) => number;
  readonly document_removeService: (a: number, b: number) => void;
  readonly document_insertMethod: (a: number, b: number, c: number, d: number) => void;
  readonly document_removeMethod: (a: number, b: number) => void;
  readonly document_defaultSigningMethod: (a: number) => number;
  readonly document_resolveMethod: (a: number, b: number, c: number) => number;
  readonly document_revokeMerkleKey: (a: number, b: number, c: number, d: number) => number;
  readonly document_signSelf: (a: number, b: number, c: number, d: number) => void;
  readonly document_verifySelfSigned: (a: number) => number;
  readonly document_verifyRootDocument: (a: number) => void;
  readonly document_signCredential: (a: number, b: number, c: number) => number;
  readonly document_signPresentation: (a: number, b: number, c: number) => number;
  readonly document_signData: (a: number, b: number, c: number) => number;
  readonly document_verifyData: (a: number, b: number) => number;
  readonly document_verifyDataWithScope: (a: number, b: number, c: number, d: number) => number;
  readonly document_diff: (a: number, b: number, c: number, d: number, e: number, f: number, g: number) => number;
  readonly document_verifyDiff: (a: number, b: number) => void;
  readonly document_merge_diff: (a: number, b: number) => void;
  readonly document_integrationIndex: (a: number, b: number) => void;
  readonly document_diffIndex: (a: number, b: number, c: number) => void;
  readonly document_metadata: (a: number) => number;
  readonly document_metadata_created: (a: number) => number;
  readonly document_set_metadata_created: (a: number, b: number) => void;
  readonly document_metadata_updated: (a: number) => number;
  readonly document_set_metadata_updated: (a: number, b: number) => void;
  readonly document_metadata_previous_message_id: (a: number, b: number) => void;
  readonly document_set_metadata_previous_message_id: (a: number, b: number, c: number) => void;
  readonly document_metadata_proof: (a: number) => number;
  readonly document_toJSON: (a: number) => number;
  readonly document_fromJSON: (a: number) => number;
  readonly __wbg_service_free: (a: number) => void;
  readonly service_toJSON: (a: number) => number;
  readonly service_fromJSON: (a: number) => number;
  readonly __wbg_explorerurl_free: (a: number) => void;
  readonly explorerurl_parse: (a: number, b: number) => number;
  readonly explorerurl_mainnet: () => number;
  readonly explorerurl_devnet: () => number;
  readonly explorerurl_messageUrl: (a: number, b: number, c: number, d: number) => void;
  readonly explorerurl_resolverUrl: (a: number, b: number, c: number, d: number) => void;
  readonly explorerurl_toString: (a: number, b: number) => void;
  readonly __wbg_receipt_free: (a: number) => void;
  readonly receipt_network: (a: number) => number;
  readonly receipt_message_id: (a: number, b: number) => void;
  readonly receipt_network_id: (a: number, b: number) => void;
  readonly receipt_nonce: (a: number, b: number) => void;
  readonly receipt_toJSON: (a: number) => number;
  readonly receipt_fromJSON: (a: number) => number;
  readonly start: () => void;
  readonly __wbg_documenthistory_free: (a: number) => void;
  readonly documenthistory_integrationChainData: (a: number) => number;
  readonly documenthistory_integrationChainSpam: (a: number) => number;
  readonly documenthistory_diffChainData: (a: number) => number;
  readonly documenthistory_diffChainSpam: (a: number) => number;
  readonly documenthistory_toJSON: (a: number) => number;
  readonly documenthistory_fromJSON: (a: number) => number;
  readonly __wbg_integrationchainhistory_free: (a: number) => void;
  readonly __wbg_diffchainhistory_free: (a: number) => void;
  readonly integrationchainhistory_chainData: (a: number) => number;
  readonly diffchainhistory_chainData: (a: number) => number;
  readonly integrationchainhistory_spam: (a: number) => number;
  readonly integrationchainhistory_toJSON: (a: number) => number;
  readonly integrationchainhistory_fromJSON: (a: number) => number;
  readonly diffchainhistory_spam: (a: number) => number;
  readonly diffchainhistory_toJSON: (a: number) => number;
  readonly diffchainhistory_fromJSON: (a: number) => number;
  readonly __wbg_verificationmethod_free: (a: number) => void;
  readonly verificationmethod_new: (a: number, b: number, c: number) => number;
  readonly verificationmethod_fromDID: (a: number, b: number, c: number, d: number) => number;
  readonly verificationmethod_createMerkleKey: (a: number, b: number, c: number, d: number, e: number) => number;
  readonly verificationmethod_id: (a: number) => number;
  readonly verificationmethod_controller: (a: number) => number;
  readonly verificationmethod_set_controller: (a: number, b: number) => void;
  readonly verificationmethod_type_: (a: number, b: number) => void;
  readonly verificationmethod_data: (a: number) => number;
  readonly verificationmethod_toJSON: (a: number) => number;
  readonly verificationmethod_fromJSON: (a: number) => number;
  readonly __wbg_keypair_free: (a: number) => void;
  readonly keypair_new: (a: number) => number;
  readonly keypair_fromBase58: (a: number, b: number, c: number, d: number, e: number) => number;
  readonly keypair_public: (a: number, b: number) => void;
  readonly keypair_private: (a: number, b: number) => void;
  readonly keypair_toJSON: (a: number) => number;
  readonly keypair_fromJSON: (a: number) => number;
  readonly __wbg_resolveddocument_free: (a: number) => void;
  readonly resolveddocument_mergeDiffMessage: (a: number, b: number) => void;
  readonly resolveddocument_document: (a: number) => number;
  readonly resolveddocument_intoDocument: (a: number) => number;
  readonly resolveddocument_diff_message_id: (a: number, b: number) => void;
  readonly resolveddocument_set_diff_message_id: (a: number, b: number, c: number) => void;
  readonly resolveddocument_integration_message_id: (a: number, b: number) => void;
  readonly resolveddocument_set_integration_message_id: (a: number, b: number, c: number) => void;
  readonly resolveddocument_toJSON: (a: number) => number;
  readonly resolveddocument_fromJSON: (a: number) => number;
  readonly BrotliDecoderCreateInstance: (a: number, b: number, c: number) => number;
  readonly BrotliDecoderSetParameter: (a: number, b: number, c: number) => void;
  readonly BrotliDecoderDecompressPrealloc: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number, k: number) => void;
  readonly BrotliDecoderDecompressWithReturnInfo: (a: number, b: number, c: number, d: number, e: number) => void;
  readonly BrotliDecoderDecompress: (a: number, b: number, c: number, d: number) => number;
  readonly BrotliDecoderDecompressStream: (a: number, b: number, c: number, d: number, e: number, f: number) => number;
  readonly BrotliDecoderDecompressStreaming: (a: number, b: number, c: number, d: number, e: number) => number;
  readonly BrotliDecoderMallocU8: (a: number, b: number) => number;
  readonly BrotliDecoderFreeU8: (a: number, b: number, c: number) => void;
  readonly BrotliDecoderMallocUsize: (a: number, b: number) => number;
  readonly BrotliDecoderFreeUsize: (a: number, b: number, c: number) => void;
  readonly BrotliDecoderDestroyInstance: (a: number) => void;
  readonly BrotliDecoderHasMoreOutput: (a: number) => number;
  readonly BrotliDecoderTakeOutput: (a: number, b: number) => number;
  readonly BrotliDecoderIsUsed: (a: number) => number;
  readonly BrotliDecoderIsFinished: (a: number) => number;
  readonly BrotliDecoderGetErrorCode: (a: number) => number;
  readonly BrotliDecoderGetErrorString: (a: number) => number;
  readonly BrotliDecoderErrorString: (a: number) => number;
  readonly BrotliDecoderVersion: () => number;
  readonly __wbindgen_malloc: (a: number) => number;
  readonly __wbindgen_realloc: (a: number, b: number, c: number) => number;
  readonly __wbindgen_export_2: WebAssembly.Table;
  readonly _dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h77cc1c031d67f529: (a: number, b: number, c: number) => void;
  readonly _dyn_core__ops__function__FnMut_____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__hf632f9491e3437dd: (a: number, b: number) => void;
  readonly __wbindgen_add_to_stack_pointer: (a: number) => number;
  readonly __wbindgen_free: (a: number, b: number) => void;
  readonly __wbindgen_exn_store: (a: number) => void;
  readonly wasm_bindgen__convert__closures__invoke2_mut__ha4d7a16bf3195c6a: (a: number, b: number, c: number, d: number) => void;
  readonly __wbindgen_start: () => void;
}

/**
* Loads the Wasm file so the lib can be used, relative path to Wasm file
* @param {string | undefined} path
*/
export function init (path?: string): Promise<void>;
